{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/vue/observer.png","path":"images/vue/observer.png","modified":0,"renderable":0},{"_id":"source/images/vue/array.png","path":"images/vue/array.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"source/images/vue/observer1.png","path":"images/vue/observer1.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/vue/observer.png","path":"images/vue/observer.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/vue/array.png","path":"images/vue/array.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/vue/observer1.png","path":"images/vue/observer1.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1592450816000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1592450816000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1592450816000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1592450816000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1592450816000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1592450816000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1592450816000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1592450816000},{"_id":"themes/next/_config.yml","hash":"1d1452c32f9828a460cf039e51a66f99d69762e2","modified":1594821611398},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1592450816000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1592450816000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1592450816000},{"_id":"source/_posts/hello-world.md","hash":"a3422c5064cb59f882317ceb3ae0329b7a6b5f4d","modified":1594906222722},{"_id":"source/categories/index.md","hash":"1d18798f737df9b21b910a03cefc8217862b455e","modified":1614842410767},{"_id":"source/tags/index.md","hash":"a60724572145f557de28f701d4761fbd019426a3","modified":1614839486245},{"_id":"source/images/.DS_Store","hash":"43f62090d438dc409faa2daccb201a7d3f586b89","modified":1594867183551},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1592450816000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1592450816000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1592450816000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1592450816000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1592450816000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1592450816000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1592450816000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1592450816000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1592450816000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1592450816000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1592450816000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1592450816000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1592450816000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1592450816000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1592450816000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1592450816000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1592450816000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1592450816000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1592450816000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1592450816000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1592450816000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1592450816000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1592450816000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1592450816000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1592450816000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1592450816000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1592450816000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1592450816000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1592450816000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1592450816000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1592450816000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1592450816000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1592450816000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1592450816000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1592450816000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1592450816000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1592450816000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1592450816000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1592450816000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1592450816000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1592450816000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1592450816000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1592450816000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1592450816000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1592450816000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1592450816000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1592450816000},{"_id":"themes/next/layout/post.swig","hash":"d0257638957528b0c4c0558807613f333cc04d9f","modified":1594800429094},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1592450816000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1592450816000},{"_id":"source/_posts/chrome/v8.md","hash":"2a42c4fe1cee9ba975a1ff4f04e94cf15434432b","modified":1614840520265},{"_id":"source/_posts/vue/promise.md","hash":"1b878a40e9c98c683922681de4cbf3c6a7664e83","modified":1614839967556},{"_id":"source/_posts/vue/reactive2.md","hash":"033e5c8531ef1b5550fe26b6779f9bf27590c1f0","modified":1614839912878},{"_id":"source/_posts/vue/reactive3.md","hash":"82346acda0f144012013c17166342e30f821e10f","modified":1608774393429},{"_id":"source/_posts/vue/vnode.md","hash":"4d969e057144ac81b7da1d45f28b88d32c3b8cef","modified":1614839862317},{"_id":"source/_posts/vue/vue-router.md","hash":"7aabdf7985a0bb6314d5f6201f0e1be11389e732","modified":1614842479727},{"_id":"source/images/vue/webkit.png","hash":"2a140492f6dbdea1016a4d26e490fea961882687","modified":1608774393436},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1592450816000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1592450816000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1592450816000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1592450816000},{"_id":"source/images/vue/observer.png","hash":"bc46e1f1812ac852851fa8235a2e7d58ebcc2170","modified":1594865159073},{"_id":"source/images/vue/array.png","hash":"992bcf50a96f0664f1a42c13a0ef83687a41db61","modified":1594865159073},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1592450816000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1592450816000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1592450816000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1592450816000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1592450816000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1592450816000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1592450816000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1592450816000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1592450816000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1592450816000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1592450816000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1592450816000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1592450816000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1592450816000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1592450816000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1592450816000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1592450816000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1592450816000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1592450816000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1592450816000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1592450816000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1592450816000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1592450816000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1592450816000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1592450816000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1592450816000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1592450816000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1592450816000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1592450816000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1592450816000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1592450816000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1592450816000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1592450816000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1592450816000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1592450816000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1592450816000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1592450816000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1592450816000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1592450816000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1592450816000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1592450816000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1592450816000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1592450816000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1592450816000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592450816000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1592450816000},{"_id":"themes/next/source/images/avatar.gif","hash":"f0650c090d94e30aba2858d0f25b423ad64c3b50","modified":1594799607570},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1592450816000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1592450816000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1592450816000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1592450816000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1592450816000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1592450816000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1592450816000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1592450816000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1592450816000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1592450816000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1592450816000},{"_id":"themes/next/source/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1592450816000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1592450816000},{"_id":"source/images/vue/observer1.png","hash":"88e79cd3b9655323e45a2303eaed8ccfdd3b1de3","modified":1594865159074},{"_id":"source/images/vue/layer.png","hash":"06158792f30aff12e6866d75353a4def87777717","modified":1608774393432},{"_id":"source/images/vue/pools.png","hash":"587115aaf28f11a0377abcc7e535d3418aeb5f9c","modified":1608774393433},{"_id":"source/images/vue/render.png","hash":"57b8879ef21aba386e52743dc3a1ea08a61bc7b7","modified":1608774393435},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1592450816000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1592450816000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1592450816000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1592450816000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1592450816000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1592450816000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1592450816000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1592450816000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1592450816000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1592450816000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1592450816000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1592450816000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1592450816000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1592450816000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1592450816000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1592450816000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1592450816000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1592450816000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1592450816000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1592450816000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1592450816000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1592450816000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1592450816000},{"_id":"themes/next/source/images/vue/observer.png","hash":"bc46e1f1812ac852851fa8235a2e7d58ebcc2170","modified":1594865564042},{"_id":"themes/next/source/images/vue/array.png","hash":"992bcf50a96f0664f1a42c13a0ef83687a41db61","modified":1594865564042},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1592450816000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1592450816000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1592450816000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1592450816000},{"_id":"themes/next/source/images/vue/observer1.png","hash":"88e79cd3b9655323e45a2303eaed8ccfdd3b1de3","modified":1594865564044},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1592450816000},{"_id":"public/tags/index.html","hash":"5a93619385df9713513acad2e62f14b86e2fc2e0","modified":1614840623131},{"_id":"public/categories/index.html","hash":"b0a58fba503bd75fc30ece6271a8632a6b1c76bb","modified":1614840623131},{"_id":"public/2021/02/19/chrome/v8/index.html","hash":"1f915f92502a64200f828184c7af3e68f4f36abc","modified":1614840623131},{"_id":"public/2021/02/19/vue/promise/index.html","hash":"c597f57129ef273b0261820ad3c5937bd960cd44","modified":1614840623131},{"_id":"public/2020/07/27/vue/reactive3/index.html","hash":"60dffd903a8634671570810e82859d0fefd8e504","modified":1614840623131},{"_id":"public/2020/07/15/hello-world/index.html","hash":"9a34b437067a64197e44dde364dc9cb0691e2591","modified":1614840623131},{"_id":"public/categories/JS/index.html","hash":"2bd8835fe75bbb554d974c83ce02e553ce126cc9","modified":1614840623131},{"_id":"public/categories/Chrome/index.html","hash":"f70b7c730d708adcb3dfbc04cd637ad5eedd9b10","modified":1614840623131},{"_id":"public/categories/vue分类/index.html","hash":"7a0a7716f4b67794d0e5c515b25093e68c079aef","modified":1614840623131},{"_id":"public/categories/ES6/index.html","hash":"35b6abbb398e4ebadabcff64b41c978e9198f571","modified":1614840623131},{"_id":"public/categories/VueRouter/index.html","hash":"7ee8a29674acbeb23ab35a40c7aaccaf1d0181f7","modified":1614840623131},{"_id":"public/tags/v8/index.html","hash":"4b288a48fdc58b003ec0ec21359022789c584a01","modified":1614840623131},{"_id":"public/tags/vue/index.html","hash":"329a9fc72585ce9f46b8a1056d38d33c8ce48d66","modified":1614840623131},{"_id":"public/tags/promise/index.html","hash":"6fd23a356cf993f728bd1f1fe5045879cde9a41b","modified":1614840623131},{"_id":"public/tags/es6/index.html","hash":"319858bfa10d4db13e07603f65b81229298581da","modified":1614840623131},{"_id":"public/tags/router/index.html","hash":"262c1e67949f697543c093bb9f159eda0ce15da0","modified":1614840623131},{"_id":"public/archives/index.html","hash":"5abad33561945067e737db2e221999f8cc559b7b","modified":1614840623131},{"_id":"public/archives/2020/index.html","hash":"3277611ea32df0c50c188eb5a53eec575df5ce1c","modified":1614840623131},{"_id":"public/archives/2020/07/index.html","hash":"3632fb5f65ef2020b7001246f1c4488104c8fa89","modified":1614840623131},{"_id":"public/archives/2020/12/index.html","hash":"b65123018132cdd01e284bc347354281dd79b712","modified":1614840623131},{"_id":"public/archives/2021/index.html","hash":"a2978d501c820d66841eb0f375e08a8414800ac4","modified":1614840623131},{"_id":"public/archives/2021/02/index.html","hash":"090b0e952d272817aed56e7bb4cf45196cf5d3b1","modified":1614840623131},{"_id":"public/2021/02/19/vue/vue-router/index.html","hash":"54e4650d7e76962412fa9e2b3057294cdbb93201","modified":1614840623131},{"_id":"public/2020/12/20/vue/vnode/index.html","hash":"f8331286acf799ea882a98fe6500e93d7dab4274","modified":1614840623131},{"_id":"public/2020/07/27/vue/reactive2/index.html","hash":"52846385be5730894788465b8659550afddfc90a","modified":1614840623131},{"_id":"public/index.html","hash":"11b29fd7a0d3a3168ed5887ced875ef7bf5b562d","modified":1614840623131},{"_id":"public/images/vue/observer.png","hash":"bc46e1f1812ac852851fa8235a2e7d58ebcc2170","modified":1614840623131},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614840623131},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1614840623131},{"_id":"public/images/avatar.gif","hash":"f0650c090d94e30aba2858d0f25b423ad64c3b50","modified":1614840623131},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1614840623131},{"_id":"public/images/vue/array.png","hash":"992bcf50a96f0664f1a42c13a0ef83687a41db61","modified":1614840623131},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1614840623131},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1614840623131},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1614840623131},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1614840623131},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1614840623131},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1614840623131},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1614840623131},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1614840623131},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1614840623131},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1614840623131},{"_id":"public/images/vue/webkit.png","hash":"2a140492f6dbdea1016a4d26e490fea961882687","modified":1614840623131},{"_id":"public/images/vue/observer1.png","hash":"88e79cd3b9655323e45a2303eaed8ccfdd3b1de3","modified":1614840623131},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1614840623131},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1614840623131},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1614840623131},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1614840623131},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1614840623131},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1614840623131},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1614840623131},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1614840623131},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1614840623131},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1614840623131},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1614840623131},{"_id":"public/css/main.css","hash":"60add55b49f19c8bb4ce06ab4f7a03ce3ab5ae6d","modified":1614840623131},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1614840623131},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1614840623131},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1614840623131},{"_id":"public/images/vue/pools.png","hash":"587115aaf28f11a0377abcc7e535d3418aeb5f9c","modified":1614840623131},{"_id":"public/images/vue/layer.png","hash":"06158792f30aff12e6866d75353a4def87777717","modified":1614840623131},{"_id":"public/images/vue/render.png","hash":"57b8879ef21aba386e52743dc3a1ea08a61bc7b7","modified":1614840623131},{"_id":"source/_posts/vue/vuex.md","hash":"55cf78e7db883cd3162d5038d0157deeb3952844","modified":1614842482158},{"_id":"source/_posts/vue-reactive.md","hash":"741ba500857fc33ce065da92dcbc7dc542aef85f","modified":1614842410767}],"Category":[{"name":"JS","_id":"ckluievow0002a2syarzyeiw7"},{"name":"Chrome","_id":"ckluievqe0007a2sya1db45h4"},{"name":"VUE","_id":"ckluievqh000ca2sy7dry4qtr"},{"name":"ES6","_id":"ckluievqm000oa2syaz6s3hto"},{"name":"VueRouter","_id":"ckluievqn000sa2sy3qkx3ldv"},{"name":"vuex","_id":"ckluikvhb0001gdsy760k6fnf"},{"name":"Vue","_id":"ckluilbz00006gdsy180m2xsm"}],"Data":[],"Page":[{"title":"分类","date":"2020-07-16T01:20:49.000Z","categories":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-07-16 09:20:49\ncategories: categories\n---\n","updated":"2021-03-04T07:20:10.767Z","path":"categories/index.html","_id":"ckluievot0001a2sydshp0ufk","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-07-16T01:20:49.000Z","type":"tags","_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-07-16 09:20:49\ntype: tags\n---\n\n\n","updated":"2021-03-04T06:31:26.245Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckluievpp0004a2syhgl5a91b","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: JS\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-15T01:10:34.585Z","updated":"2020-07-16T13:30:22.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckluievoo0000a2syeg51cxnp","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"浏览器v8","date":"2021-02-19T12:49:44.000Z","_content":"","source":"_posts/chrome/v8.md","raw":"---\ntitle: 浏览器v8\ndate: 2021-02-19 20:49:44\ntags: [v8]\ncategories: Chrome\n---","slug":"chrome/v8","published":1,"updated":"2021-03-04T06:48:40.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckluievqc0005a2sy5y04cp9i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vue2.0响应式原理","date":"2020-07-27T01:49:44.000Z","_content":"\n\n在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。\n\n<!-- more -->\n\n### 基础知识\n在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。\n\n#### Object.defineProperty\nObject.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\nECMAScript有两种属性:数据属性和访问器属性\n* 数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；\n* 访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。\n\n``` javascript\nvar obj = {};\nvar a;\nObject.defineProperty(obj, 'a', {\n  get: function() {\n    console.log('get val');　\n    return a;\n  },\n  set: function(newVal) {\n    console.log('set val:' + newVal);\n    a = newVal;\n  }\n});\nobj.a;     // get val \nobj.a = '111'; // set val: 111\n```\n\n示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。\nVue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。\n\n#### 观察者模式\nvue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。\n观察者模式的基本要素\n* Subject (目标)\n* Observer （观察者）\n\n{% img /images/vue/observer.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n定义一个收集所有依赖的容器\n```javascript\n// 目标者类\nclass Subject {\n  constructor() {\n    this.observers = []\n  }\n  // 添加\n  add(observer) {\n    this.observers.push(observer)\n  }\n  // 删除\n  remove(observer) {\n    let idx = this.observers.find(observer)\n    idx > -1 && this.observers.splice(idx,1)\n  }\n  // 通知\n  notify() {\n    for(let oberver of this.observers) {\n      observer.update()\n    }\n  }\n}\n\n// 观察者类\nclass Observer{\n  constructor(name) {\n    this.name = name\n  }\n  update() {\n    console.log(`目标通知我更新了,我是${this.name}`)\n  }\n}\n```\n\n### 源码解析\n\n#### 整体概览\n下面就进入vue源码开始解析vue是如何实现响应式的。\n\nvue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在`init.js`文件中，找到在初始化的时候会执行`initState(vm)`,在`state.js`文件中找到`initData(vm)`,最终会执行 `observe(data, true /* asRootData */)`,最终找到核心的observe相关代码。\n\n\n由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift...）来实现监测改变。\n``` js\n// instance/observer\nexport function initState (vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options\n  if (opts.props) initProps(vm, opts.props)\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    initData(vm)\n  } else {\n    observe(vm._data = {}, true /* asRootData */) \n  }\n  if (opts.computed) initComputed(vm, opts.computed)\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n  ... 省略部分代码\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  const methods = vm.$options.methods\n  ... 省略部分代码\n  // observe data\n  observe(data, true /* asRootData */)\n}\n```\n\n``` js\n// observe/index.js\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) { // 如果是基本类型 或虚拟node 则直接返回\n    return\n  }\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    def(value, '__ob__', this)\n    // 分数组和对象来分别处理\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods) // 添加拦截器\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys) // 添加拦截器\n      }\n      this.observeArray(value) // 将数组转换成响应式\n    } else {\n      this.walk(value) // 将对象转换成响应式\n    }\n  }\n}\n```\n\n#### data是Object类型\n{% img /images/vue/observer1.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n\n``` js\n// observe/index.js\n// 循环遍历每一个key,劫持添加getter setter\nwalk (obj: Object) {\n  const keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i])\n  }\n}\n\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep() // Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知\n  ... // 省略部分代码\n  let childOb = !shallow && observe(val) // 递归每一个可以，将数据转换成observe\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 给数据添加访问器属性get\n    // 什么时候触发get? 当页面组件“mount”阶段，会调用render渲染页面，在渲染的时候会获取数据，自动触发reactiveGetter，\n    // Dep.target 是什么？ 通过查看lifecycle.js 在mountComponent阶段会new Watcher并将全局的Dep.target指向这个Watcher\n    // dep.denpend() 做了什么？ 会将该Watcher添加到dep的subs队列中\n    get: function reactiveGetter () { \n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() \n        if (childOb) {\n          childOb.dep.depend() // 收集依赖\n          if (Array.isArray(value)) {\n            dependArray(value) // 收集依赖\n          }\n        }\n      }\n      return value\n    },\n    // 给数据添加访问器属性set\n    // 什么时候触发set? key对应的值改变会自动触发reactiveSetter调用，执行notify通知\n    // notify做了什么？ 遍历subs（Watcher）,执行watcher中的update,并将watcher添加至待更新队列\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      ... // 省略部分代码\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify() // 数据更新后调用dep 通知存放的所有的依赖\n    }\n  })\n}\n```\n\nDep (目标：Subject)\ndefineReactive用到了一个很重要的对象 Dep,那么Dep是干嘛的？Dep是一个目标对象，负责管理Watcher（添加watcher、删除watcher、将自己添加至Watcher的deps队列、通知自己管理的每一个watcher进行更新）\n``` js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    ... // 省略部分代码\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n```\n\nWatcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。\n他就是负责具体的脏活累活\n* 1、收集依赖\n* 2、负责执行cb来更新所有的依赖\n \n``` js\n// Watcher.js\nexport default class Watcher {\n  ... // 省略部分代码\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function\n  ) {\n    this.vm = vm\n    ... // 省略部分代码\n    this.cb = cb\n    ... // 省略部分代码\n    this.expression = process.env.NODE_ENV !== 'production'\n      ? expOrFn.toString()\n      : ''\n    // parse expression for getter\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      ... // 省略部分代码\n    }\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n  }\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n  get () {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    value = this.getter.call(vm, vm)\n    ... // 省略部分代码\n    return value\n  }\n\n  /**\n   * Add a dependency to this directive.\n   */\n  addDep (dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n\n  update () {\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this)\n    }\n  }\n\n  run () {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n        }\n      }\n    }\n  }\n\n  depend () {\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].depend()\n    }\n  }\n}\n```\n\n#### data是Array类型\n{% img /images/vue/array.png 440 320\"点击查看大图:vi/vim-cheat-sheet\" %}\n下面将一步步梳理 data中的数据结构是array类型,vue源码是如何实现拦截并转换成响应式\n\n``` js\n// 以数据结构为列\ndata: {\n  array: [1, 2, 3]\n}\n```\n``` js\n// instance/state.js\n// 入口\n...\nobserve(data, true /* asRootData */)\n...\n```\n``` js\n// observer/index.js\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n```\n将data转换成observer,执行walk(value)\n``` js\nimport { arrayMethods } from './array'\nconst arrayKeys = Object.getOwnPropertyNames(arrayMethods)\n\nexport class Observer {\n  ...\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep() // important ! 这边的dep实际用于类型是数组的数据 收集依赖\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      if (hasProto) { // 判断浏览器是否支持 __proto__\n        protoAugment(value, arrayMethods) // 使用__proto__将拦截器中的方法直接覆盖原型\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys) // 通过复制将拦截器中的方法挂载到value上\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n}\n\n// 遍历每一个key\nwalk (obj: Object) {\n  const keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i])\n  }\n}\n\n\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep() // Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知\n  ... // 省略部分代码\n  let childOb = !shallow && observe(val) // 这一步很重要，递归的将array转换成observer\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 页面在mount阶段获取数据时 会触发reactiveGetter，给数组添加依赖\n    get: function reactiveGetter () { \n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() \n        if (childOb) {\n          childOb.dep.depend() // 数组添加收集依赖\n          if (Array.isArray(value)) {\n            dependArray(value) // 收集依赖\n          }\n        }\n      }\n      return value\n    },\n    // 数组变化并不会触发这边的set回调，实际上会执行拦截器中的__obj__.dep.notify() （见array.js中的方法）\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      ... // 省略部分代码\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify() // 数据更新后调用dep 通知存放的所有的依赖\n    }\n  })\n}\n\n```\n\n当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。\n``` js\n// 拦截器方法\n// observer/array.js\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 数组变化时，会调用dep 目标去通知所有的依赖进行更新\n    return result\n  })\n})\n```\n\n``` js \n// observer/index.js\n\n\n// 使用 __proto__ 覆盖原型\nfunction protoAugment (target, src: Object) {\n  target.__proto__ = src\n}\n\n// 通过复制将拦截器中的方法挂载到value上\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n```\n\n### 总结\nvue如何实现响应式?具体实现上对象和数组稍有不同：\n* 1、对象：在create阶段，会递归的将data中的数据递归的添加get、set访问器属性,页面在mount阶段会创建全局的Watcher,并且mount阶段需要执行render渲染，会调用页面数据对应的get函数，每个数据的key都有对应的dep依赖，执行dep.depend()时会将 将dep 添加至当前watcher的subs队列中去。当页面数据更新后，调用set函数，执行通知。\n* 2、数组：在create阶段，如果是数组类型时，给会执行数组改变方法添加拦截器，同时也会给数据添加get和set访问器属性，只是数组改变时并不会触发set函数，页面在mount阶段执行render,调用数据对应的get函数，并调用childObj.dep.depend()收集watcher,(childObj.dep是什么？在初始化的data的时候会递归的将array转成observer,所以childObj.dep指的是数组array的依赖)。在array数据更新之后，会执行拦截器中的__obj__.dep.notify()执行通知，set并不会触发。\n\n通知之后页面怎么更新渲染？\n当发送通知之后，会将watcher添加至队列中由vue统一调度执行更新，后期vue将会进行patch，对比虚拟dom，以当前页面组件级别做一个整体更新。","source":"_posts/vue/reactive2.md","raw":"---\ntitle: vue2.0响应式原理\ndate: 2020-07-27 09:49:44\ntags: [vue]\ncategories: VUE\n---\n\n\n在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。\n\n<!-- more -->\n\n### 基础知识\n在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。\n\n#### Object.defineProperty\nObject.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\nECMAScript有两种属性:数据属性和访问器属性\n* 数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；\n* 访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。\n\n``` javascript\nvar obj = {};\nvar a;\nObject.defineProperty(obj, 'a', {\n  get: function() {\n    console.log('get val');　\n    return a;\n  },\n  set: function(newVal) {\n    console.log('set val:' + newVal);\n    a = newVal;\n  }\n});\nobj.a;     // get val \nobj.a = '111'; // set val: 111\n```\n\n示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。\nVue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。\n\n#### 观察者模式\nvue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。\n观察者模式的基本要素\n* Subject (目标)\n* Observer （观察者）\n\n{% img /images/vue/observer.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n定义一个收集所有依赖的容器\n```javascript\n// 目标者类\nclass Subject {\n  constructor() {\n    this.observers = []\n  }\n  // 添加\n  add(observer) {\n    this.observers.push(observer)\n  }\n  // 删除\n  remove(observer) {\n    let idx = this.observers.find(observer)\n    idx > -1 && this.observers.splice(idx,1)\n  }\n  // 通知\n  notify() {\n    for(let oberver of this.observers) {\n      observer.update()\n    }\n  }\n}\n\n// 观察者类\nclass Observer{\n  constructor(name) {\n    this.name = name\n  }\n  update() {\n    console.log(`目标通知我更新了,我是${this.name}`)\n  }\n}\n```\n\n### 源码解析\n\n#### 整体概览\n下面就进入vue源码开始解析vue是如何实现响应式的。\n\nvue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在`init.js`文件中，找到在初始化的时候会执行`initState(vm)`,在`state.js`文件中找到`initData(vm)`,最终会执行 `observe(data, true /* asRootData */)`,最终找到核心的observe相关代码。\n\n\n由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift...）来实现监测改变。\n``` js\n// instance/observer\nexport function initState (vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options\n  if (opts.props) initProps(vm, opts.props)\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    initData(vm)\n  } else {\n    observe(vm._data = {}, true /* asRootData */) \n  }\n  if (opts.computed) initComputed(vm, opts.computed)\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n  ... 省略部分代码\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  const methods = vm.$options.methods\n  ... 省略部分代码\n  // observe data\n  observe(data, true /* asRootData */)\n}\n```\n\n``` js\n// observe/index.js\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) { // 如果是基本类型 或虚拟node 则直接返回\n    return\n  }\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    def(value, '__ob__', this)\n    // 分数组和对象来分别处理\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods) // 添加拦截器\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys) // 添加拦截器\n      }\n      this.observeArray(value) // 将数组转换成响应式\n    } else {\n      this.walk(value) // 将对象转换成响应式\n    }\n  }\n}\n```\n\n#### data是Object类型\n{% img /images/vue/observer1.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n\n``` js\n// observe/index.js\n// 循环遍历每一个key,劫持添加getter setter\nwalk (obj: Object) {\n  const keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i])\n  }\n}\n\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep() // Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知\n  ... // 省略部分代码\n  let childOb = !shallow && observe(val) // 递归每一个可以，将数据转换成observe\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 给数据添加访问器属性get\n    // 什么时候触发get? 当页面组件“mount”阶段，会调用render渲染页面，在渲染的时候会获取数据，自动触发reactiveGetter，\n    // Dep.target 是什么？ 通过查看lifecycle.js 在mountComponent阶段会new Watcher并将全局的Dep.target指向这个Watcher\n    // dep.denpend() 做了什么？ 会将该Watcher添加到dep的subs队列中\n    get: function reactiveGetter () { \n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() \n        if (childOb) {\n          childOb.dep.depend() // 收集依赖\n          if (Array.isArray(value)) {\n            dependArray(value) // 收集依赖\n          }\n        }\n      }\n      return value\n    },\n    // 给数据添加访问器属性set\n    // 什么时候触发set? key对应的值改变会自动触发reactiveSetter调用，执行notify通知\n    // notify做了什么？ 遍历subs（Watcher）,执行watcher中的update,并将watcher添加至待更新队列\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      ... // 省略部分代码\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify() // 数据更新后调用dep 通知存放的所有的依赖\n    }\n  })\n}\n```\n\nDep (目标：Subject)\ndefineReactive用到了一个很重要的对象 Dep,那么Dep是干嘛的？Dep是一个目标对象，负责管理Watcher（添加watcher、删除watcher、将自己添加至Watcher的deps队列、通知自己管理的每一个watcher进行更新）\n``` js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    ... // 省略部分代码\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n```\n\nWatcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。\n他就是负责具体的脏活累活\n* 1、收集依赖\n* 2、负责执行cb来更新所有的依赖\n \n``` js\n// Watcher.js\nexport default class Watcher {\n  ... // 省略部分代码\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function\n  ) {\n    this.vm = vm\n    ... // 省略部分代码\n    this.cb = cb\n    ... // 省略部分代码\n    this.expression = process.env.NODE_ENV !== 'production'\n      ? expOrFn.toString()\n      : ''\n    // parse expression for getter\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      ... // 省略部分代码\n    }\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n  }\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n  get () {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    value = this.getter.call(vm, vm)\n    ... // 省略部分代码\n    return value\n  }\n\n  /**\n   * Add a dependency to this directive.\n   */\n  addDep (dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n\n  update () {\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this)\n    }\n  }\n\n  run () {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n        }\n      }\n    }\n  }\n\n  depend () {\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].depend()\n    }\n  }\n}\n```\n\n#### data是Array类型\n{% img /images/vue/array.png 440 320\"点击查看大图:vi/vim-cheat-sheet\" %}\n下面将一步步梳理 data中的数据结构是array类型,vue源码是如何实现拦截并转换成响应式\n\n``` js\n// 以数据结构为列\ndata: {\n  array: [1, 2, 3]\n}\n```\n``` js\n// instance/state.js\n// 入口\n...\nobserve(data, true /* asRootData */)\n...\n```\n``` js\n// observer/index.js\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n```\n将data转换成observer,执行walk(value)\n``` js\nimport { arrayMethods } from './array'\nconst arrayKeys = Object.getOwnPropertyNames(arrayMethods)\n\nexport class Observer {\n  ...\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep() // important ! 这边的dep实际用于类型是数组的数据 收集依赖\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      if (hasProto) { // 判断浏览器是否支持 __proto__\n        protoAugment(value, arrayMethods) // 使用__proto__将拦截器中的方法直接覆盖原型\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys) // 通过复制将拦截器中的方法挂载到value上\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n}\n\n// 遍历每一个key\nwalk (obj: Object) {\n  const keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i])\n  }\n}\n\n\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep() // Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知\n  ... // 省略部分代码\n  let childOb = !shallow && observe(val) // 这一步很重要，递归的将array转换成observer\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 页面在mount阶段获取数据时 会触发reactiveGetter，给数组添加依赖\n    get: function reactiveGetter () { \n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() \n        if (childOb) {\n          childOb.dep.depend() // 数组添加收集依赖\n          if (Array.isArray(value)) {\n            dependArray(value) // 收集依赖\n          }\n        }\n      }\n      return value\n    },\n    // 数组变化并不会触发这边的set回调，实际上会执行拦截器中的__obj__.dep.notify() （见array.js中的方法）\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      ... // 省略部分代码\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify() // 数据更新后调用dep 通知存放的所有的依赖\n    }\n  })\n}\n\n```\n\n当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。\n``` js\n// 拦截器方法\n// observer/array.js\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 数组变化时，会调用dep 目标去通知所有的依赖进行更新\n    return result\n  })\n})\n```\n\n``` js \n// observer/index.js\n\n\n// 使用 __proto__ 覆盖原型\nfunction protoAugment (target, src: Object) {\n  target.__proto__ = src\n}\n\n// 通过复制将拦截器中的方法挂载到value上\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n```\n\n### 总结\nvue如何实现响应式?具体实现上对象和数组稍有不同：\n* 1、对象：在create阶段，会递归的将data中的数据递归的添加get、set访问器属性,页面在mount阶段会创建全局的Watcher,并且mount阶段需要执行render渲染，会调用页面数据对应的get函数，每个数据的key都有对应的dep依赖，执行dep.depend()时会将 将dep 添加至当前watcher的subs队列中去。当页面数据更新后，调用set函数，执行通知。\n* 2、数组：在create阶段，如果是数组类型时，给会执行数组改变方法添加拦截器，同时也会给数据添加get和set访问器属性，只是数组改变时并不会触发set函数，页面在mount阶段执行render,调用数据对应的get函数，并调用childObj.dep.depend()收集watcher,(childObj.dep是什么？在初始化的data的时候会递归的将array转成observer,所以childObj.dep指的是数组array的依赖)。在array数据更新之后，会执行拦截器中的__obj__.dep.notify()执行通知，set并不会触发。\n\n通知之后页面怎么更新渲染？\n当发送通知之后，会将watcher添加至队列中由vue统一调度执行更新，后期vue将会进行patch，对比虚拟dom，以当前页面组件级别做一个整体更新。","slug":"vue/reactive2","published":1,"updated":"2021-03-04T06:38:32.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckluievqd0006a2sy5tpccefa","content":"<p>在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p>在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。</p>\n<h4 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h4><p>Object.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<p>ECMAScript有两种属性:数据属性和访问器属性</p>\n<ul>\n<li>数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；</li>\n<li>访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get val'</span>);　</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set val:'</span> + newVal);</span><br><span class=\"line\">    a = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">obj.a;     <span class=\"comment\">// get val </span></span><br><span class=\"line\">obj.a = <span class=\"string\">'111'</span>; <span class=\"comment\">// set val: 111</span></span><br></pre></td></tr></table></figure>\n\n<p>示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。<br>Vue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>vue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。<br>观察者模式的基本要素</p>\n<ul>\n<li>Subject (目标)</li>\n<li>Observer （观察者）</li>\n</ul>\n<img src=\"/sblog/images/vue/observer.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n<p>定义一个收集所有依赖的容器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加</span></span><br><span class=\"line\">  add(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(observer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除</span></span><br><span class=\"line\">  remove(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"keyword\">this</span>.observers.find(observer)</span><br><span class=\"line\">    idx &gt; <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.observers.splice(idx,<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通知</span></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> oberver <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.observers) &#123;</span><br><span class=\"line\">      observer.update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`目标通知我更新了,我是<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"整体概览\"><a href=\"#整体概览\" class=\"headerlink\" title=\"整体概览\"></a>整体概览</h4><p>下面就进入vue源码开始解析vue是如何实现响应式的。</p>\n<p>vue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在<code>init.js</code>文件中，找到在初始化的时候会执行<code>initState(vm)</code>,在<code>state.js</code>文件中找到<code>initData(vm)</code>,最终会执行 <code>observe(data, true /* asRootData */)</code>,最终找到核心的observe相关代码。</p>\n<p>由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift…）来实现监测改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// instance/observer</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm: Component</span>) </span>&#123;</span><br><span class=\"line\">  vm._watchers = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = vm.$options</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">    initData(vm)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">    initWatch(vm, opts.watch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initData</span> (<span class=\"params\">vm: Component</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = vm.$options.data</span><br><span class=\"line\">  data = vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span></span><br><span class=\"line\">    ? getData(data, vm)</span><br><span class=\"line\">    : data || &#123;&#125;</span><br><span class=\"line\">  ... 省略部分代码</span><br><span class=\"line\">  <span class=\"comment\">// proxy data on instance</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = vm.$options.props</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methods = vm.$options.methods</span><br><span class=\"line\">  ... 省略部分代码</span><br><span class=\"line\">  <span class=\"comment\">// observe data</span></span><br><span class=\"line\">  observe(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observe/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span> (<span class=\"params\">value: any, asRootData: ?boolean</span>): <span class=\"title\">Observer</span> | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(value) || value <span class=\"keyword\">instanceof</span> VNode) &#123; <span class=\"comment\">// 如果是基本类型 或虚拟node 则直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ob: Observer | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasOwn(value, <span class=\"string\">'__ob__'</span>) &amp;&amp; value.__ob__ <span class=\"keyword\">instanceof</span> Observer) &#123;</span><br><span class=\"line\">    ob = value.__ob__</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !isServerRendering() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"built_in\">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.isExtensible(value) &amp;&amp;</span><br><span class=\"line\">    !value._isVue</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> Observer(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.vmCount++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  value: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 分数组和对象来分别处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        protoAugment(value, arrayMethods) <span class=\"comment\">// 添加拦截器</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys) <span class=\"comment\">// 添加拦截器</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value) <span class=\"comment\">// 将数组转换成响应式</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value) <span class=\"comment\">// 将对象转换成响应式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Object类型\"><a href=\"#data是Object类型\" class=\"headerlink\" title=\"data是Object类型\"></a>data是Object类型</h4><img src=\"/sblog/images/vue/observer1.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observe/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// 循环遍历每一个key,劫持添加getter setter</span></span><br><span class=\"line\">walk (obj: <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    defineReactive(obj, keys[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  obj: Object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  val: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  customSetter?: ?Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  shallow?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知</span></span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; observe(val) <span class=\"comment\">// 递归每一个可以，将数据转换成observe</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 给数据添加访问器属性get</span></span><br><span class=\"line\">    <span class=\"comment\">// 什么时候触发get? 当页面组件“mount”阶段，会调用render渲染页面，在渲染的时候会获取数据，自动触发reactiveGetter，</span></span><br><span class=\"line\">    <span class=\"comment\">// Dep.target 是什么？ 通过查看lifecycle.js 在mountComponent阶段会new Watcher并将全局的Dep.target指向这个Watcher</span></span><br><span class=\"line\">    <span class=\"comment\">// dep.denpend() 做了什么？ 会将该Watcher添加到dep的subs队列中</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123; </span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend() <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value) <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 给数据添加访问器属性set</span></span><br><span class=\"line\">    <span class=\"comment\">// 什么时候触发set? key对应的值改变会自动触发reactiveSetter调用，执行notify通知</span></span><br><span class=\"line\">    <span class=\"comment\">// notify做了什么？ 遍历subs（Watcher）,执行watcher中的update,并将watcher添加至待更新队列</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">// 数据更新后调用dep 通知存放的所有的依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Dep (目标：Subject)<br>defineReactive用到了一个很重要的对象 Dep,那么Dep是干嘛的？Dep是一个目标对象，负责管理Watcher（添加watcher、删除watcher、将自己添加至Watcher的deps队列、通知自己管理的每一个watcher进行更新）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: ?Watcher;</span><br><span class=\"line\">  id: number;</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Watcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。<br>他就是负责具体的脏活累活</p>\n<ul>\n<li>1、收集依赖</li>\n<li>2、负责执行cb来更新所有的依赖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Watcher.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (</span><br><span class=\"line\">    vm: Component,</span><br><span class=\"line\">    expOrFn: string | Function,</span><br><span class=\"line\">    cb: Function</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.expression = process.env.NODE_ENV !== <span class=\"string\">'production'</span></span><br><span class=\"line\">      ? expOrFn.toString()</span><br><span class=\"line\">      : <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = parsePath(expOrFn)</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.lazy</span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>.vm</span><br><span class=\"line\">    value = <span class=\"keyword\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Add a dependency to this directive.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  addDep (dep: Dep) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDepIds.add(id)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDeps.push(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">        dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  update () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            handleError(e, <span class=\"keyword\">this</span>.vm, <span class=\"string\">`callback for watcher \"<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.expression&#125;</span>\"`</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deps[i].depend()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Array类型\"><a href=\"#data是Array类型\" class=\"headerlink\" title=\"data是Array类型\"></a>data是Array类型</h4><img src=\"/sblog/images/vue/array.png\" class=\"\" width=\"440\" title=\"320\" alt=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>下面将一步步梳理 data中的数据结构是array类型,vue源码是如何实现拦截并转换成响应式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以数据结构为列</span></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  array: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// instance/state.js</span></span><br><span class=\"line\"><span class=\"comment\">// 入口</span></span><br><span class=\"line\">...</span><br><span class=\"line\">observe(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observer/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span> (<span class=\"params\">value: any, asRootData: ?boolean</span>): <span class=\"title\">Observer</span> | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(value) || value <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ob: Observer | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasOwn(value, <span class=\"string\">'__ob__'</span>) &amp;&amp; value.__ob__ <span class=\"keyword\">instanceof</span> Observer) &#123;</span><br><span class=\"line\">    ob = value.__ob__</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !isServerRendering() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"built_in\">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.isExtensible(value) &amp;&amp;</span><br><span class=\"line\">    !value._isVue</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> Observer(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.vmCount++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将data转换成observer,执行walk(value)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./array'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayKeys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(arrayMethods)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// important ! 这边的dep实际用于类型是数组的数据 收集依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vmCount = <span class=\"number\">0</span></span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123; <span class=\"comment\">// 判断浏览器是否支持 __proto__</span></span><br><span class=\"line\">        protoAugment(value, arrayMethods) <span class=\"comment\">// 使用__proto__将拦截器中的方法直接覆盖原型</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys) <span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历每一个key</span></span><br><span class=\"line\">walk (obj: <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    defineReactive(obj, keys[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  obj: Object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  val: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  customSetter?: ?Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  shallow?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知</span></span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; observe(val) <span class=\"comment\">// 这一步很重要，递归的将array转换成observer</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 页面在mount阶段获取数据时 会触发reactiveGetter，给数组添加依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123; </span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend() <span class=\"comment\">// 数组添加收集依赖</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value) <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 数组变化并不会触发这边的set回调，实际上会执行拦截器中的__obj__.dep.notify() （见array.js中的方法）</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">// 数据更新后调用dep 通知存放的所有的依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拦截器方法</span></span><br><span class=\"line\"><span class=\"comment\">// observer/array.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 数组变化时，会调用dep 目标去通知所有的依赖进行更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observer/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 __proto__ 覆盖原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: Object</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: Object, src: Object, keys: Array&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>vue如何实现响应式?具体实现上对象和数组稍有不同：</p>\n<ul>\n<li>1、对象：在create阶段，会递归的将data中的数据递归的添加get、set访问器属性,页面在mount阶段会创建全局的Watcher,并且mount阶段需要执行render渲染，会调用页面数据对应的get函数，每个数据的key都有对应的dep依赖，执行dep.depend()时会将 将dep 添加至当前watcher的subs队列中去。当页面数据更新后，调用set函数，执行通知。</li>\n<li>2、数组：在create阶段，如果是数组类型时，给会执行数组改变方法添加拦截器，同时也会给数据添加get和set访问器属性，只是数组改变时并不会触发set函数，页面在mount阶段执行render,调用数据对应的get函数，并调用childObj.dep.depend()收集watcher,(childObj.dep是什么？在初始化的data的时候会递归的将array转成observer,所以childObj.dep指的是数组array的依赖)。在array数据更新之后，会执行拦截器中的<strong>obj</strong>.dep.notify()执行通知，set并不会触发。</li>\n</ul>\n<p>通知之后页面怎么更新渲染？<br>当发送通知之后，会将watcher添加至队列中由vue统一调度执行更新，后期vue将会进行patch，对比虚拟dom，以当前页面组件级别做一个整体更新。</p>\n","site":{"data":{}},"excerpt":"<p>在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。</p>","more":"<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p>在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。</p>\n<h4 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h4><p>Object.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<p>ECMAScript有两种属性:数据属性和访问器属性</p>\n<ul>\n<li>数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；</li>\n<li>访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get val'</span>);　</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set val:'</span> + newVal);</span><br><span class=\"line\">    a = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">obj.a;     <span class=\"comment\">// get val </span></span><br><span class=\"line\">obj.a = <span class=\"string\">'111'</span>; <span class=\"comment\">// set val: 111</span></span><br></pre></td></tr></table></figure>\n\n<p>示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。<br>Vue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>vue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。<br>观察者模式的基本要素</p>\n<ul>\n<li>Subject (目标)</li>\n<li>Observer （观察者）</li>\n</ul>\n<img src=\"/sblog/images/vue/observer.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n<p>定义一个收集所有依赖的容器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加</span></span><br><span class=\"line\">  add(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(observer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除</span></span><br><span class=\"line\">  remove(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"keyword\">this</span>.observers.find(observer)</span><br><span class=\"line\">    idx &gt; <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.observers.splice(idx,<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通知</span></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> oberver <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.observers) &#123;</span><br><span class=\"line\">      observer.update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`目标通知我更新了,我是<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"整体概览\"><a href=\"#整体概览\" class=\"headerlink\" title=\"整体概览\"></a>整体概览</h4><p>下面就进入vue源码开始解析vue是如何实现响应式的。</p>\n<p>vue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在<code>init.js</code>文件中，找到在初始化的时候会执行<code>initState(vm)</code>,在<code>state.js</code>文件中找到<code>initData(vm)</code>,最终会执行 <code>observe(data, true /* asRootData */)</code>,最终找到核心的observe相关代码。</p>\n<p>由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift…）来实现监测改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// instance/observer</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm: Component</span>) </span>&#123;</span><br><span class=\"line\">  vm._watchers = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = vm.$options</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">    initData(vm)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">    initWatch(vm, opts.watch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initData</span> (<span class=\"params\">vm: Component</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = vm.$options.data</span><br><span class=\"line\">  data = vm._data = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span></span><br><span class=\"line\">    ? getData(data, vm)</span><br><span class=\"line\">    : data || &#123;&#125;</span><br><span class=\"line\">  ... 省略部分代码</span><br><span class=\"line\">  <span class=\"comment\">// proxy data on instance</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = vm.$options.props</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methods = vm.$options.methods</span><br><span class=\"line\">  ... 省略部分代码</span><br><span class=\"line\">  <span class=\"comment\">// observe data</span></span><br><span class=\"line\">  observe(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observe/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span> (<span class=\"params\">value: any, asRootData: ?boolean</span>): <span class=\"title\">Observer</span> | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(value) || value <span class=\"keyword\">instanceof</span> VNode) &#123; <span class=\"comment\">// 如果是基本类型 或虚拟node 则直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ob: Observer | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasOwn(value, <span class=\"string\">'__ob__'</span>) &amp;&amp; value.__ob__ <span class=\"keyword\">instanceof</span> Observer) &#123;</span><br><span class=\"line\">    ob = value.__ob__</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !isServerRendering() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"built_in\">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.isExtensible(value) &amp;&amp;</span><br><span class=\"line\">    !value._isVue</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> Observer(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.vmCount++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  value: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 分数组和对象来分别处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        protoAugment(value, arrayMethods) <span class=\"comment\">// 添加拦截器</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys) <span class=\"comment\">// 添加拦截器</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value) <span class=\"comment\">// 将数组转换成响应式</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value) <span class=\"comment\">// 将对象转换成响应式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Object类型\"><a href=\"#data是Object类型\" class=\"headerlink\" title=\"data是Object类型\"></a>data是Object类型</h4><img src=\"/sblog/images/vue/observer1.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observe/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// 循环遍历每一个key,劫持添加getter setter</span></span><br><span class=\"line\">walk (obj: <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    defineReactive(obj, keys[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  obj: Object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  val: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  customSetter?: ?Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  shallow?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知</span></span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; observe(val) <span class=\"comment\">// 递归每一个可以，将数据转换成observe</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 给数据添加访问器属性get</span></span><br><span class=\"line\">    <span class=\"comment\">// 什么时候触发get? 当页面组件“mount”阶段，会调用render渲染页面，在渲染的时候会获取数据，自动触发reactiveGetter，</span></span><br><span class=\"line\">    <span class=\"comment\">// Dep.target 是什么？ 通过查看lifecycle.js 在mountComponent阶段会new Watcher并将全局的Dep.target指向这个Watcher</span></span><br><span class=\"line\">    <span class=\"comment\">// dep.denpend() 做了什么？ 会将该Watcher添加到dep的subs队列中</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123; </span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend() <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value) <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 给数据添加访问器属性set</span></span><br><span class=\"line\">    <span class=\"comment\">// 什么时候触发set? key对应的值改变会自动触发reactiveSetter调用，执行notify通知</span></span><br><span class=\"line\">    <span class=\"comment\">// notify做了什么？ 遍历subs（Watcher）,执行watcher中的update,并将watcher添加至待更新队列</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">// 数据更新后调用dep 通知存放的所有的依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Dep (目标：Subject)<br>defineReactive用到了一个很重要的对象 Dep,那么Dep是干嘛的？Dep是一个目标对象，负责管理Watcher（添加watcher、删除watcher、将自己添加至Watcher的deps队列、通知自己管理的每一个watcher进行更新）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: ?Watcher;</span><br><span class=\"line\">  id: number;</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Watcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。<br>他就是负责具体的脏活累活</p>\n<ul>\n<li>1、收集依赖</li>\n<li>2、负责执行cb来更新所有的依赖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Watcher.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (</span><br><span class=\"line\">    vm: Component,</span><br><span class=\"line\">    expOrFn: string | Function,</span><br><span class=\"line\">    cb: Function</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.expression = process.env.NODE_ENV !== <span class=\"string\">'production'</span></span><br><span class=\"line\">      ? expOrFn.toString()</span><br><span class=\"line\">      : <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = parsePath(expOrFn)</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.lazy</span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>.vm</span><br><span class=\"line\">    value = <span class=\"keyword\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Add a dependency to this directive.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  addDep (dep: Dep) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDepIds.add(id)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDeps.push(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">        dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  update () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            handleError(e, <span class=\"keyword\">this</span>.vm, <span class=\"string\">`callback for watcher \"<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.expression&#125;</span>\"`</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deps[i].depend()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Array类型\"><a href=\"#data是Array类型\" class=\"headerlink\" title=\"data是Array类型\"></a>data是Array类型</h4><img src=\"/sblog/images/vue/array.png\" class=\"\" width=\"440\" title=\"320\" alt=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>下面将一步步梳理 data中的数据结构是array类型,vue源码是如何实现拦截并转换成响应式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以数据结构为列</span></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  array: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// instance/state.js</span></span><br><span class=\"line\"><span class=\"comment\">// 入口</span></span><br><span class=\"line\">...</span><br><span class=\"line\">observe(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observer/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span> (<span class=\"params\">value: any, asRootData: ?boolean</span>): <span class=\"title\">Observer</span> | <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(value) || value <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ob: Observer | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasOwn(value, <span class=\"string\">'__ob__'</span>) &amp;&amp; value.__ob__ <span class=\"keyword\">instanceof</span> Observer) &#123;</span><br><span class=\"line\">    ob = value.__ob__</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !isServerRendering() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"built_in\">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.isExtensible(value) &amp;&amp;</span><br><span class=\"line\">    !value._isVue</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> Observer(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.vmCount++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将data转换成observer,执行walk(value)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./array'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayKeys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(arrayMethods)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// important ! 这边的dep实际用于类型是数组的数据 收集依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vmCount = <span class=\"number\">0</span></span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123; <span class=\"comment\">// 判断浏览器是否支持 __proto__</span></span><br><span class=\"line\">        protoAugment(value, arrayMethods) <span class=\"comment\">// 使用__proto__将拦截器中的方法直接覆盖原型</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys) <span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历每一个key</span></span><br><span class=\"line\">walk (obj: <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    defineReactive(obj, keys[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  obj: Object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  val: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  customSetter?: ?Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  shallow?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知</span></span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; observe(val) <span class=\"comment\">// 这一步很重要，递归的将array转换成observer</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 页面在mount阶段获取数据时 会触发reactiveGetter，给数组添加依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123; </span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend() <span class=\"comment\">// 数组添加收集依赖</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value) <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 数组变化并不会触发这边的set回调，实际上会执行拦截器中的__obj__.dep.notify() （见array.js中的方法）</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">// 数据更新后调用dep 通知存放的所有的依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拦截器方法</span></span><br><span class=\"line\"><span class=\"comment\">// observer/array.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 数组变化时，会调用dep 目标去通知所有的依赖进行更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observer/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 __proto__ 覆盖原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: Object</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: Object, src: Object, keys: Array&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>vue如何实现响应式?具体实现上对象和数组稍有不同：</p>\n<ul>\n<li>1、对象：在create阶段，会递归的将data中的数据递归的添加get、set访问器属性,页面在mount阶段会创建全局的Watcher,并且mount阶段需要执行render渲染，会调用页面数据对应的get函数，每个数据的key都有对应的dep依赖，执行dep.depend()时会将 将dep 添加至当前watcher的subs队列中去。当页面数据更新后，调用set函数，执行通知。</li>\n<li>2、数组：在create阶段，如果是数组类型时，给会执行数组改变方法添加拦截器，同时也会给数据添加get和set访问器属性，只是数组改变时并不会触发set函数，页面在mount阶段执行render,调用数据对应的get函数，并调用childObj.dep.depend()收集watcher,(childObj.dep是什么？在初始化的data的时候会递归的将array转成observer,所以childObj.dep指的是数组array的依赖)。在array数据更新之后，会执行拦截器中的<strong>obj</strong>.dep.notify()执行通知，set并不会触发。</li>\n</ul>\n<p>通知之后页面怎么更新渲染？<br>当发送通知之后，会将watcher添加至队列中由vue统一调度执行更新，后期vue将会进行patch，对比虚拟dom，以当前页面组件级别做一个整体更新。</p>"},{"title":"vue3.0响应式原理","date":"2020-07-27T01:49:44.000Z","_content":"ddd\n","source":"_posts/vue/reactive3.md","raw":"---\ntitle: vue3.0响应式原理\ndate: 2020-07-27 09:49:44\ntags:\ncategories: VUE\n---\nddd\n","slug":"vue/reactive3","published":1,"updated":"2020-12-24T01:46:33.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckluievqf0009a2sy6mqte5h6","content":"<p>ddd</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ddd</p>\n"},{"title":"虚拟DOM简介","date":"2020-12-20T05:49:44.000Z","_content":"\n## 为什么要引入虚拟DOM?\n### 频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\n从解析HTML到生成DOM树再到页面渲染，浏览器需要渲染引擎处理一系列的操作，才能将页面绘制出来。\n{% img /images/vue/webkit.png \"点击查看大图:vi/vim-cheat-sheet\" %}\nwebkit主流程\n如图，在DOM树修改了之后，还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成和显示这些流程，如果频繁操作DOM,那么势必会影响浏览器的性能。\n#### 样式计算\n* 把CSS转换成浏览器能理解的结构\n    * link外部css文件\n    * style标记内的css\n    * 元素内嵌css\n执行转换操作，将css文本转换成styleSheets\n* 标准化样式表属性值\n如：red标准化为rgb(255,0,0) bold标准化为700\n* 计算DOM节点具体样式\n    * css继承\n    所有子节点都会继承父节点的样式\n    * 层叠规则\n\n#### 布局\n* 创建布局树\n遍历DOM树所有节点，把这些节点加到布局树中，不可见节点忽略。\n* 布局计算\n\n#### 分成\n{% img /images/vue/layer.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n布局树和图层树的关系示意图\n并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的图层，这个节点就从属于父节点的图层。\n满足什么条件，渲染引擎才会为特定的节点创建新的层呢？\n* 拥有层叠上下文属性的元素会被提升为单独的一层\n* 需要裁减的地方会被创建为图层\n\n#### 图层绘制\n把图层的绘制拆分成很懂小的绘制指令，把这些指令按照顺序组成一个待绘制列表。\n{% img /images/vue/render.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n渲染流水线示意图\n如图，渲染进程的主线程执行完图层绘制之后，将绘制列表提交给合成线程。\n\n#### 栅格化操作\n* 图块（tile）\n用户能看到的部分叫视口（viewport）,有的图层很大，页面滚动很久才能滚动到底部，要绘制图层所有内容的话，产生太大的开销，基于这个原因，合成线程将图层划分为图块。\n栅格化是将图块转换为位图，图块是栅格化执行的最小单位。\n渲染进程维护了一个栅格化的线程池。\n{% img /images/vue/pools.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n合成线程提交图块给栅格化线程池\n\n渲染进程把生成图块的指令发送给GPU,然后再GPU中执行生成图块位图，并保存在GPU内存中。\n\n#### 合成和显示\n浏览器接收合成线程绘制图块的命令----”DrawQuard“,将页面内容绘制到内存中，最终显示在屏幕上。\n\n所以，生成DOM树之后，浏览器还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成显示一系列的流程，才能渲染显示在屏幕上，如果用户频繁的操作DOM,造成页面重绘或回流，浏览器仍需要按流程处理生成页面，会影响浏览器的性能。\n\n### 什么是虚拟DOM\n虚拟DOM是普通的JavaScript对象，用来描述一个真实的DOM元素。\nVNode类的代码如下，用VNode来描述DOM节点对象。\n```\nexport default class VNode {\n  constructor (tag, data, children, text, elm, context, componentOptions, asyncFactory) {\n    this.tag = tag\n    this.data = data\n    this.children = children\n    this.text = text\n    this.elm = elm\n    this.ns = undefined\n    this.context = context\n    this.functionalContext = undefined\n    this.functionalOptions = undefined\n    this.functionalScopeId = undefined\n    this.key = data && data.key\n    this.componentOptions = componentOptions\n    this.componentInstance = undefined\n    this.parent = undefined\n    this.raw = false\n    this.isStatic = false\n    this.isRootInsert = true\n    this.isComment = false\n    this.isCloned = false\n    this.isOnce = false\n    this.asyncFactory = asyncFactory\n    this.asyncMeta = undefined\n    this.isAsyncPlaceholder = false\n  }\n\n  get child () {\n    return this.componentInstance\n  }\n}\n```\n\n### 为什么要使用虚拟DOM?\n当状态发生变化时，组件的监听器watcher监听到状态的变化，通知组件对比新创建的虚拟DOM和缓存的虚拟DOM节点进行patch对比，且根据对比结果只更新需要更新的真实DOM节点，从而避免不必要的DOM操作。\n\n### Vue虚拟节点\n* 注释节点\n* 文本节点\n* 元素节点\n* 组件节点\n* 函数式组件\n* 克隆节点\n","source":"_posts/vue/vnode.md","raw":"---\ntitle: 虚拟DOM简介\ndate: 2020-12-20 13:49:44\ntags: [vue]\ncategories: VUE\n---\n\n## 为什么要引入虚拟DOM?\n### 频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\n从解析HTML到生成DOM树再到页面渲染，浏览器需要渲染引擎处理一系列的操作，才能将页面绘制出来。\n{% img /images/vue/webkit.png \"点击查看大图:vi/vim-cheat-sheet\" %}\nwebkit主流程\n如图，在DOM树修改了之后，还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成和显示这些流程，如果频繁操作DOM,那么势必会影响浏览器的性能。\n#### 样式计算\n* 把CSS转换成浏览器能理解的结构\n    * link外部css文件\n    * style标记内的css\n    * 元素内嵌css\n执行转换操作，将css文本转换成styleSheets\n* 标准化样式表属性值\n如：red标准化为rgb(255,0,0) bold标准化为700\n* 计算DOM节点具体样式\n    * css继承\n    所有子节点都会继承父节点的样式\n    * 层叠规则\n\n#### 布局\n* 创建布局树\n遍历DOM树所有节点，把这些节点加到布局树中，不可见节点忽略。\n* 布局计算\n\n#### 分成\n{% img /images/vue/layer.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n布局树和图层树的关系示意图\n并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的图层，这个节点就从属于父节点的图层。\n满足什么条件，渲染引擎才会为特定的节点创建新的层呢？\n* 拥有层叠上下文属性的元素会被提升为单独的一层\n* 需要裁减的地方会被创建为图层\n\n#### 图层绘制\n把图层的绘制拆分成很懂小的绘制指令，把这些指令按照顺序组成一个待绘制列表。\n{% img /images/vue/render.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n渲染流水线示意图\n如图，渲染进程的主线程执行完图层绘制之后，将绘制列表提交给合成线程。\n\n#### 栅格化操作\n* 图块（tile）\n用户能看到的部分叫视口（viewport）,有的图层很大，页面滚动很久才能滚动到底部，要绘制图层所有内容的话，产生太大的开销，基于这个原因，合成线程将图层划分为图块。\n栅格化是将图块转换为位图，图块是栅格化执行的最小单位。\n渲染进程维护了一个栅格化的线程池。\n{% img /images/vue/pools.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n合成线程提交图块给栅格化线程池\n\n渲染进程把生成图块的指令发送给GPU,然后再GPU中执行生成图块位图，并保存在GPU内存中。\n\n#### 合成和显示\n浏览器接收合成线程绘制图块的命令----”DrawQuard“,将页面内容绘制到内存中，最终显示在屏幕上。\n\n所以，生成DOM树之后，浏览器还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成显示一系列的流程，才能渲染显示在屏幕上，如果用户频繁的操作DOM,造成页面重绘或回流，浏览器仍需要按流程处理生成页面，会影响浏览器的性能。\n\n### 什么是虚拟DOM\n虚拟DOM是普通的JavaScript对象，用来描述一个真实的DOM元素。\nVNode类的代码如下，用VNode来描述DOM节点对象。\n```\nexport default class VNode {\n  constructor (tag, data, children, text, elm, context, componentOptions, asyncFactory) {\n    this.tag = tag\n    this.data = data\n    this.children = children\n    this.text = text\n    this.elm = elm\n    this.ns = undefined\n    this.context = context\n    this.functionalContext = undefined\n    this.functionalOptions = undefined\n    this.functionalScopeId = undefined\n    this.key = data && data.key\n    this.componentOptions = componentOptions\n    this.componentInstance = undefined\n    this.parent = undefined\n    this.raw = false\n    this.isStatic = false\n    this.isRootInsert = true\n    this.isComment = false\n    this.isCloned = false\n    this.isOnce = false\n    this.asyncFactory = asyncFactory\n    this.asyncMeta = undefined\n    this.isAsyncPlaceholder = false\n  }\n\n  get child () {\n    return this.componentInstance\n  }\n}\n```\n\n### 为什么要使用虚拟DOM?\n当状态发生变化时，组件的监听器watcher监听到状态的变化，通知组件对比新创建的虚拟DOM和缓存的虚拟DOM节点进行patch对比，且根据对比结果只更新需要更新的真实DOM节点，从而避免不必要的DOM操作。\n\n### Vue虚拟节点\n* 注释节点\n* 文本节点\n* 元素节点\n* 组件节点\n* 函数式组件\n* 克隆节点\n","slug":"vue/vnode","published":1,"updated":"2021-03-04T06:56:01.217Z","_id":"ckluievqg000aa2sy4oyke2jp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要引入虚拟DOM\"><a href=\"#为什么要引入虚拟DOM\" class=\"headerlink\" title=\"为什么要引入虚拟DOM?\"></a>为什么要引入虚拟DOM?</h2><h3 id=\"频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\"><a href=\"#频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\" class=\"headerlink\" title=\"频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\"></a>频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？</h3><p>从解析HTML到生成DOM树再到页面渲染，浏览器需要渲染引擎处理一系列的操作，才能将页面绘制出来。</p>\n<img src=\"/sblog/images/vue/webkit.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>webkit主流程<br>如图，在DOM树修改了之后，还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成和显示这些流程，如果频繁操作DOM,那么势必会影响浏览器的性能。</p>\n<h4 id=\"样式计算\"><a href=\"#样式计算\" class=\"headerlink\" title=\"样式计算\"></a>样式计算</h4><ul>\n<li>把CSS转换成浏览器能理解的结构<ul>\n<li>link外部css文件</li>\n<li>style标记内的css</li>\n<li>元素内嵌css<br>执行转换操作，将css文本转换成styleSheets</li>\n</ul>\n</li>\n<li>标准化样式表属性值<br>如：red标准化为rgb(255,0,0) bold标准化为700</li>\n<li>计算DOM节点具体样式<ul>\n<li>css继承<br>所有子节点都会继承父节点的样式</li>\n<li>层叠规则</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><ul>\n<li>创建布局树<br>遍历DOM树所有节点，把这些节点加到布局树中，不可见节点忽略。</li>\n<li>布局计算</li>\n</ul>\n<h4 id=\"分成\"><a href=\"#分成\" class=\"headerlink\" title=\"分成\"></a>分成</h4><img src=\"/sblog/images/vue/layer.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>布局树和图层树的关系示意图<br>并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的图层，这个节点就从属于父节点的图层。<br>满足什么条件，渲染引擎才会为特定的节点创建新的层呢？</p>\n<ul>\n<li>拥有层叠上下文属性的元素会被提升为单独的一层</li>\n<li>需要裁减的地方会被创建为图层</li>\n</ul>\n<h4 id=\"图层绘制\"><a href=\"#图层绘制\" class=\"headerlink\" title=\"图层绘制\"></a>图层绘制</h4><p>把图层的绘制拆分成很懂小的绘制指令，把这些指令按照顺序组成一个待绘制列表。</p>\n<img src=\"/sblog/images/vue/render.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>渲染流水线示意图<br>如图，渲染进程的主线程执行完图层绘制之后，将绘制列表提交给合成线程。</p>\n<h4 id=\"栅格化操作\"><a href=\"#栅格化操作\" class=\"headerlink\" title=\"栅格化操作\"></a>栅格化操作</h4><ul>\n<li>图块（tile）<br>用户能看到的部分叫视口（viewport）,有的图层很大，页面滚动很久才能滚动到底部，要绘制图层所有内容的话，产生太大的开销，基于这个原因，合成线程将图层划分为图块。<br>栅格化是将图块转换为位图，图块是栅格化执行的最小单位。<br>渲染进程维护了一个栅格化的线程池。<img src=\"/sblog/images/vue/pools.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n合成线程提交图块给栅格化线程池</li>\n</ul>\n<p>渲染进程把生成图块的指令发送给GPU,然后再GPU中执行生成图块位图，并保存在GPU内存中。</p>\n<h4 id=\"合成和显示\"><a href=\"#合成和显示\" class=\"headerlink\" title=\"合成和显示\"></a>合成和显示</h4><p>浏览器接收合成线程绘制图块的命令—-”DrawQuard“,将页面内容绘制到内存中，最终显示在屏幕上。</p>\n<p>所以，生成DOM树之后，浏览器还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成显示一系列的流程，才能渲染显示在屏幕上，如果用户频繁的操作DOM,造成页面重绘或回流，浏览器仍需要按流程处理生成页面，会影响浏览器的性能。</p>\n<h3 id=\"什么是虚拟DOM\"><a href=\"#什么是虚拟DOM\" class=\"headerlink\" title=\"什么是虚拟DOM\"></a>什么是虚拟DOM</h3><p>虚拟DOM是普通的JavaScript对象，用来描述一个真实的DOM元素。<br>VNode类的代码如下，用VNode来描述DOM节点对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default class VNode &#123;</span><br><span class=\"line\">  constructor (tag, data, children, text, elm, context, componentOptions, asyncFactory) &#123;</span><br><span class=\"line\">    this.tag &#x3D; tag</span><br><span class=\"line\">    this.data &#x3D; data</span><br><span class=\"line\">    this.children &#x3D; children</span><br><span class=\"line\">    this.text &#x3D; text</span><br><span class=\"line\">    this.elm &#x3D; elm</span><br><span class=\"line\">    this.ns &#x3D; undefined</span><br><span class=\"line\">    this.context &#x3D; context</span><br><span class=\"line\">    this.functionalContext &#x3D; undefined</span><br><span class=\"line\">    this.functionalOptions &#x3D; undefined</span><br><span class=\"line\">    this.functionalScopeId &#x3D; undefined</span><br><span class=\"line\">    this.key &#x3D; data &amp;&amp; data.key</span><br><span class=\"line\">    this.componentOptions &#x3D; componentOptions</span><br><span class=\"line\">    this.componentInstance &#x3D; undefined</span><br><span class=\"line\">    this.parent &#x3D; undefined</span><br><span class=\"line\">    this.raw &#x3D; false</span><br><span class=\"line\">    this.isStatic &#x3D; false</span><br><span class=\"line\">    this.isRootInsert &#x3D; true</span><br><span class=\"line\">    this.isComment &#x3D; false</span><br><span class=\"line\">    this.isCloned &#x3D; false</span><br><span class=\"line\">    this.isOnce &#x3D; false</span><br><span class=\"line\">    this.asyncFactory &#x3D; asyncFactory</span><br><span class=\"line\">    this.asyncMeta &#x3D; undefined</span><br><span class=\"line\">    this.isAsyncPlaceholder &#x3D; false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get child () &#123;</span><br><span class=\"line\">    return this.componentInstance</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么要使用虚拟DOM\"><a href=\"#为什么要使用虚拟DOM\" class=\"headerlink\" title=\"为什么要使用虚拟DOM?\"></a>为什么要使用虚拟DOM?</h3><p>当状态发生变化时，组件的监听器watcher监听到状态的变化，通知组件对比新创建的虚拟DOM和缓存的虚拟DOM节点进行patch对比，且根据对比结果只更新需要更新的真实DOM节点，从而避免不必要的DOM操作。</p>\n<h3 id=\"Vue虚拟节点\"><a href=\"#Vue虚拟节点\" class=\"headerlink\" title=\"Vue虚拟节点\"></a>Vue虚拟节点</h3><ul>\n<li>注释节点</li>\n<li>文本节点</li>\n<li>元素节点</li>\n<li>组件节点</li>\n<li>函数式组件</li>\n<li>克隆节点</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要引入虚拟DOM\"><a href=\"#为什么要引入虚拟DOM\" class=\"headerlink\" title=\"为什么要引入虚拟DOM?\"></a>为什么要引入虚拟DOM?</h2><h3 id=\"频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\"><a href=\"#频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\" class=\"headerlink\" title=\"频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？\"></a>频繁的操作DOM应发样式的改变，比较耗费浏览器的性能，那么为什么会耗费浏览器性能？</h3><p>从解析HTML到生成DOM树再到页面渲染，浏览器需要渲染引擎处理一系列的操作，才能将页面绘制出来。</p>\n<img src=\"/sblog/images/vue/webkit.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>webkit主流程<br>如图，在DOM树修改了之后，还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成和显示这些流程，如果频繁操作DOM,那么势必会影响浏览器的性能。</p>\n<h4 id=\"样式计算\"><a href=\"#样式计算\" class=\"headerlink\" title=\"样式计算\"></a>样式计算</h4><ul>\n<li>把CSS转换成浏览器能理解的结构<ul>\n<li>link外部css文件</li>\n<li>style标记内的css</li>\n<li>元素内嵌css<br>执行转换操作，将css文本转换成styleSheets</li>\n</ul>\n</li>\n<li>标准化样式表属性值<br>如：red标准化为rgb(255,0,0) bold标准化为700</li>\n<li>计算DOM节点具体样式<ul>\n<li>css继承<br>所有子节点都会继承父节点的样式</li>\n<li>层叠规则</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><ul>\n<li>创建布局树<br>遍历DOM树所有节点，把这些节点加到布局树中，不可见节点忽略。</li>\n<li>布局计算</li>\n</ul>\n<h4 id=\"分成\"><a href=\"#分成\" class=\"headerlink\" title=\"分成\"></a>分成</h4><img src=\"/sblog/images/vue/layer.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>布局树和图层树的关系示意图<br>并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的图层，这个节点就从属于父节点的图层。<br>满足什么条件，渲染引擎才会为特定的节点创建新的层呢？</p>\n<ul>\n<li>拥有层叠上下文属性的元素会被提升为单独的一层</li>\n<li>需要裁减的地方会被创建为图层</li>\n</ul>\n<h4 id=\"图层绘制\"><a href=\"#图层绘制\" class=\"headerlink\" title=\"图层绘制\"></a>图层绘制</h4><p>把图层的绘制拆分成很懂小的绘制指令，把这些指令按照顺序组成一个待绘制列表。</p>\n<img src=\"/sblog/images/vue/render.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n<p>渲染流水线示意图<br>如图，渲染进程的主线程执行完图层绘制之后，将绘制列表提交给合成线程。</p>\n<h4 id=\"栅格化操作\"><a href=\"#栅格化操作\" class=\"headerlink\" title=\"栅格化操作\"></a>栅格化操作</h4><ul>\n<li>图块（tile）<br>用户能看到的部分叫视口（viewport）,有的图层很大，页面滚动很久才能滚动到底部，要绘制图层所有内容的话，产生太大的开销，基于这个原因，合成线程将图层划分为图块。<br>栅格化是将图块转换为位图，图块是栅格化执行的最小单位。<br>渲染进程维护了一个栅格化的线程池。<img src=\"/sblog/images/vue/pools.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n合成线程提交图块给栅格化线程池</li>\n</ul>\n<p>渲染进程把生成图块的指令发送给GPU,然后再GPU中执行生成图块位图，并保存在GPU内存中。</p>\n<h4 id=\"合成和显示\"><a href=\"#合成和显示\" class=\"headerlink\" title=\"合成和显示\"></a>合成和显示</h4><p>浏览器接收合成线程绘制图块的命令—-”DrawQuard“,将页面内容绘制到内存中，最终显示在屏幕上。</p>\n<p>所以，生成DOM树之后，浏览器还需要经过样式计算、布局、分成、图层绘制、栅格化操作、合成显示一系列的流程，才能渲染显示在屏幕上，如果用户频繁的操作DOM,造成页面重绘或回流，浏览器仍需要按流程处理生成页面，会影响浏览器的性能。</p>\n<h3 id=\"什么是虚拟DOM\"><a href=\"#什么是虚拟DOM\" class=\"headerlink\" title=\"什么是虚拟DOM\"></a>什么是虚拟DOM</h3><p>虚拟DOM是普通的JavaScript对象，用来描述一个真实的DOM元素。<br>VNode类的代码如下，用VNode来描述DOM节点对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default class VNode &#123;</span><br><span class=\"line\">  constructor (tag, data, children, text, elm, context, componentOptions, asyncFactory) &#123;</span><br><span class=\"line\">    this.tag &#x3D; tag</span><br><span class=\"line\">    this.data &#x3D; data</span><br><span class=\"line\">    this.children &#x3D; children</span><br><span class=\"line\">    this.text &#x3D; text</span><br><span class=\"line\">    this.elm &#x3D; elm</span><br><span class=\"line\">    this.ns &#x3D; undefined</span><br><span class=\"line\">    this.context &#x3D; context</span><br><span class=\"line\">    this.functionalContext &#x3D; undefined</span><br><span class=\"line\">    this.functionalOptions &#x3D; undefined</span><br><span class=\"line\">    this.functionalScopeId &#x3D; undefined</span><br><span class=\"line\">    this.key &#x3D; data &amp;&amp; data.key</span><br><span class=\"line\">    this.componentOptions &#x3D; componentOptions</span><br><span class=\"line\">    this.componentInstance &#x3D; undefined</span><br><span class=\"line\">    this.parent &#x3D; undefined</span><br><span class=\"line\">    this.raw &#x3D; false</span><br><span class=\"line\">    this.isStatic &#x3D; false</span><br><span class=\"line\">    this.isRootInsert &#x3D; true</span><br><span class=\"line\">    this.isComment &#x3D; false</span><br><span class=\"line\">    this.isCloned &#x3D; false</span><br><span class=\"line\">    this.isOnce &#x3D; false</span><br><span class=\"line\">    this.asyncFactory &#x3D; asyncFactory</span><br><span class=\"line\">    this.asyncMeta &#x3D; undefined</span><br><span class=\"line\">    this.isAsyncPlaceholder &#x3D; false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get child () &#123;</span><br><span class=\"line\">    return this.componentInstance</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么要使用虚拟DOM\"><a href=\"#为什么要使用虚拟DOM\" class=\"headerlink\" title=\"为什么要使用虚拟DOM?\"></a>为什么要使用虚拟DOM?</h3><p>当状态发生变化时，组件的监听器watcher监听到状态的变化，通知组件对比新创建的虚拟DOM和缓存的虚拟DOM节点进行patch对比，且根据对比结果只更新需要更新的真实DOM节点，从而避免不必要的DOM操作。</p>\n<h3 id=\"Vue虚拟节点\"><a href=\"#Vue虚拟节点\" class=\"headerlink\" title=\"Vue虚拟节点\"></a>Vue虚拟节点</h3><ul>\n<li>注释节点</li>\n<li>文本节点</li>\n<li>元素节点</li>\n<li>组件节点</li>\n<li>函数式组件</li>\n<li>克隆节点</li>\n</ul>\n"},{"title":"vue-router 源码解析","date":"2021-02-19T12:49:44.000Z","_content":"\n## 后端路由和前端路由\n### 后端路由\n当页面切换的时候，浏览器会向服务器发送不同的URL，服务器接收到不同的URL,解析生成不同的页面，发送给浏览器，浏览器将页面进行渲染展示。\n\n### 前端路由\n在页面切换的时候，不会向浏览器发送请求，从而保证页面不刷新。\n\n## 前端路由实现的原理\n实现前端路由，需解决2个问题：\n* 1、实现url变化，页面不刷新\n* 2、捕获url变化，执行页面替换逻辑\n\n### 前端路由两种实现\n* 1、hash路由\nhttp://www.xxx.com/#/login\n满足条件：\n> #后面hash值的变化，不会向浏览器发送请求\n> location.hash可获取到#号后hash值；location.hash=\"xxx\"可替换#后hash值\n> 可通过window.addEventListener捕获hashchange事件，来执行页面替换的逻辑\n\n* 2、history路由\nhttp://www.xxx.com/login\n满足条件：\n> 基于Html5 history 新增的API,通过该api改变url地址，不会向浏览器发送请求\n> pushState()、replaceState()\n> 可通过window.addEventListener捕获popstate事件,来执行页面替换的逻辑\n\n## vue-router实现方式\nvue通过全局方法Vue.use()使用插件，\n``` javascript\n// 调用VueRouter.install(vue)\nvue.use(VueRouter)\n\nnew Vue({\n    // ... 组件选项\n})\n```\n\n* 1、vue.use()的源码实现（注：vue源码）\n``` javascript\nVue.use = function (plugin: Function | Object) {\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    const args = toArray(arguments, 1)\n    args.unshift(this)\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args)\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args)\n    }\n    installedPlugins.push(plugin)\n    return this\n}\n```\n    * VueRouter插件定义了install方法，并执行install方法\n    * 把VueRouter插件存储到installedPlugins\n\n\n* 2、VueRouter install源码实现\n``` javascript\nexport function install (Vue) {\n  if (install.installed && _Vue === Vue) return\n  install.installed = true\n\n  _Vue = Vue\n\n  const isDef = v => v !== undefined\n\n  const registerInstance = (vm, callVal) => {\n    let i = vm.$options._parentVnode\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal)\n    }\n  }\n\n  Vue.mixin({\n    beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this\n        this._router = this.$options.router\n        this._router.init(this)\n        Vue.util.defineReactive(this, '_route', this._router.history.current)\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this\n      }\n      registerInstance(this, this)\n    },\n    destroyed () {\n      registerInstance(this)\n    }\n  })\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get () { return this._routerRoot._router }\n  })\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get () { return this._routerRoot._route }\n  })\n\n  Vue.component('RouterView', View)\n  Vue.component('RouterLink', Link)\n\n  const strats = Vue.config.optionMergeStrategies\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created\n}\n```\n主要关注核心的代码`Vue.mixin`部分，通过vue混入，给每个组件注入了`beforeCreate()`和`destory()`这两个生命周期。`beforeCreate()`主要执行了`vueRouter`的`init()`方法、`_route`转换为响应式、调用`registerInstance(this, this)`;`destory()`调用`registerInstance(this, this)`\n\n* 3、VueRouter init()源码\n``` javascript\ninit (app: any /* Vue component instance */) {\n    this.apps.push(app)\n\n    // set up app destroyed handler\n    // https://github.com/vuejs/vue-router/issues/2639\n    app.$once('hook:destroyed', () => {\n      // clean out app from this.apps array once destroyed\n      const index = this.apps.indexOf(app)\n      if (index > -1) this.apps.splice(index, 1)\n      // ensure we still have a main app or null if no apps\n      // we do not release the router so it can be reused\n      if (this.app === app) this.app = this.apps[0] || null\n\n      if (!this.app) this.history.teardown()\n    })\n\n    // main app previously initialized\n    // return as we don't need to set up new history listener\n    if (this.app) {\n      return\n    }\n\n    this.app = app\n\n    const history = this.history\n\n    if (history instanceof HTML5History || history instanceof HashHistory) {\n      const handleInitialScroll = routeOrError => {\n        const from = history.current\n        const expectScroll = this.options.scrollBehavior\n        const supportsScroll = supportsPushState && expectScroll\n\n        if (supportsScroll && 'fullPath' in routeOrError) {\n          handleScroll(this, routeOrError, from, false)\n        }\n      }\n      const setupListeners = routeOrError => {\n        history.setupListeners()\n        handleInitialScroll(routeOrError)\n      }\n      history.transitionTo(\n        history.getCurrentLocation(),\n        setupListeners,\n        setupListeners\n      )\n    }\n\n    history.listen(route => {\n      this.apps.forEach(app => {\n        app._route = route\n      })\n    })\n  }\n```\ninit 主要处理了handleInitialScroll（滚动条状态）、setupListeners（注册监听）、transitionTo（加载至匹配路由组件）\n\n* 4、VueRouter constructor源码\n``` javascript\nconstructor (options: RouterOptions = {}) {\n    this.app = null\n    this.apps = []\n    this.options = options\n    this.beforeHooks = []\n    this.resolveHooks = []\n    this.afterHooks = []\n    this.matcher = createMatcher(options.routes || [], this)\n\n    let mode = options.mode || 'hash'\n    this.fallback =\n      mode === 'history' && !supportsPushState && options.fallback !== false\n    if (this.fallback) {\n      mode = 'hash'\n    }\n    if (!inBrowser) {\n      mode = 'abstract'\n    }\n    this.mode = mode\n\n    switch (mode) {\n      case 'history':\n        this.history = new HTML5History(this, options.base)\n        break\n      case 'hash':\n        this.history = new HashHistory(this, options.base, this.fallback)\n        break\n      case 'abstract':\n        this.history = new AbstractHistory(this, options.base)\n        break\n      default:\n        if (process.env.NODE_ENV !== 'production') {\n          assert(false, `invalid mode: ${mode}`)\n        }\n    }\n  }\n```\n根据不同的`mode`创建不同的history实例，且默认为hash路由。\nHTML5History、HashHistory、AbstractHistory都继承了History类，其中go、push、replace、ensureURL、getCurrentLocation、setupListeners由各自特性不同，有各自的实现。\n主要来对比 HTML5History、HashHistory这push、replace两个接口的实现\n\n    * push\n    ``` javascript\n    // hash mode\n    push (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(\n        location,\n        route => {\n            pushHash(route.fullPath)\n            handleScroll(this.router, route, fromRoute, false)\n            onComplete && onComplete(route)\n        },\n        onAbort\n        )\n    }\n    \n    function pushHash (path) {\n        if (supportsPushState) {\n            pushState(getUrl(path))\n        } else {\n            window.location.hash = path\n        }\n    }\n    ```\n    ``` javascript\n    // html5 mode\n    push (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(location, route => {\n        pushState(cleanPath(this.base + route.fullPath))\n        handleScroll(this.router, route, fromRoute, false)\n        onComplete && onComplete(route)\n        }, onAbort)\n    }\n\n    export function pushState (url?: string, replace?: boolean) {\n        saveScrollPosition()\n        // try...catch the pushState call to get around Safari\n        // DOM Exception 18 where it limits to 100 pushState calls\n        const history = window.history\n        try {\n            if (replace) {\n            // preserve existing history state as it could be overriden by the user\n            const stateCopy = extend({}, history.state)\n            stateCopy.key = getStateKey()\n            history.replaceState(stateCopy, '', url)\n            } else {\n            history.pushState({ key: setStateKey(genStateKey()) }, '', url)\n            }\n        } catch (e) {\n            window.location[replace ? 'replace' : 'assign'](url)\n        }\n    }\n    ```\n\n    * replace\n    ``` javascript\n    // hash mode\n    replace (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(\n        location,\n        route => {\n            replaceHash(route.fullPath)\n            handleScroll(this.router, route, fromRoute, false)\n            onComplete && onComplete(route)\n        },\n        onAbort\n        )\n    }\n\n    function replaceHash (path) {\n        if (supportsPushState) {\n            replaceState(getUrl(path))\n        } else {\n            window.location.replace(getUrl(path))\n        }\n    }\n    ```\n\n    ``` javascript\n    // html5 mode\n    replace (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(location, route => {\n        replaceState(cleanPath(this.base + route.fullPath))\n        handleScroll(this.router, route, fromRoute, false)\n        onComplete && onComplete(route)\n        }, onAbort)\n    }\n\n    export function replaceState (url?: string) {\n        pushState(url, true)\n    }\n    ```\n\n继续回到 transitionTo（）方法，通过location匹配到路由组件\n``` javascript\nmatch (raw: RawLocation, current?: Route, redirectedFrom?: Location): Route {\n    return this.matcher.match(raw, current, redirectedFrom)\n}\n```\nmatch源码\n``` javascript\nfunction match (\n    raw: RawLocation,\n    currentRoute?: Route,\n    redirectedFrom?: Location\n  ): Route {\n    const location = normalizeLocation(raw, currentRoute, false, router)\n    const { name } = location\n\n    if (name) {\n      const record = nameMap[name]\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, `Route with name '${name}' does not exist`)\n      }\n      if (!record) return _createRoute(null, location)\n      const paramNames = record.regex.keys\n        .filter(key => !key.optional)\n        .map(key => key.name)\n\n      if (typeof location.params !== 'object') {\n        location.params = {}\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (const key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key]\n          }\n        }\n      }\n\n      location.path = fillParams(record.path, location.params, `named route \"${name}\"`)\n      return _createRoute(record, location, redirectedFrom)\n    } else if (location.path) {\n      location.params = {}\n      for (let i = 0; i < pathList.length; i++) {\n        const path = pathList[i]\n        const record = pathMap[path]\n        if (matchRoute(record.regex, location.path, location.params)) {\n          return _createRoute(record, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n}\n```\n\n\n","source":"_posts/vue/vue-router.md","raw":"---\ntitle: vue-router 源码解析\ndate: 2021-02-19 20:49:44\ntags: [Vue, router]\ncategories: VUE\n---\n\n## 后端路由和前端路由\n### 后端路由\n当页面切换的时候，浏览器会向服务器发送不同的URL，服务器接收到不同的URL,解析生成不同的页面，发送给浏览器，浏览器将页面进行渲染展示。\n\n### 前端路由\n在页面切换的时候，不会向浏览器发送请求，从而保证页面不刷新。\n\n## 前端路由实现的原理\n实现前端路由，需解决2个问题：\n* 1、实现url变化，页面不刷新\n* 2、捕获url变化，执行页面替换逻辑\n\n### 前端路由两种实现\n* 1、hash路由\nhttp://www.xxx.com/#/login\n满足条件：\n> #后面hash值的变化，不会向浏览器发送请求\n> location.hash可获取到#号后hash值；location.hash=\"xxx\"可替换#后hash值\n> 可通过window.addEventListener捕获hashchange事件，来执行页面替换的逻辑\n\n* 2、history路由\nhttp://www.xxx.com/login\n满足条件：\n> 基于Html5 history 新增的API,通过该api改变url地址，不会向浏览器发送请求\n> pushState()、replaceState()\n> 可通过window.addEventListener捕获popstate事件,来执行页面替换的逻辑\n\n## vue-router实现方式\nvue通过全局方法Vue.use()使用插件，\n``` javascript\n// 调用VueRouter.install(vue)\nvue.use(VueRouter)\n\nnew Vue({\n    // ... 组件选项\n})\n```\n\n* 1、vue.use()的源码实现（注：vue源码）\n``` javascript\nVue.use = function (plugin: Function | Object) {\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    const args = toArray(arguments, 1)\n    args.unshift(this)\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args)\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args)\n    }\n    installedPlugins.push(plugin)\n    return this\n}\n```\n    * VueRouter插件定义了install方法，并执行install方法\n    * 把VueRouter插件存储到installedPlugins\n\n\n* 2、VueRouter install源码实现\n``` javascript\nexport function install (Vue) {\n  if (install.installed && _Vue === Vue) return\n  install.installed = true\n\n  _Vue = Vue\n\n  const isDef = v => v !== undefined\n\n  const registerInstance = (vm, callVal) => {\n    let i = vm.$options._parentVnode\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal)\n    }\n  }\n\n  Vue.mixin({\n    beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this\n        this._router = this.$options.router\n        this._router.init(this)\n        Vue.util.defineReactive(this, '_route', this._router.history.current)\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this\n      }\n      registerInstance(this, this)\n    },\n    destroyed () {\n      registerInstance(this)\n    }\n  })\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get () { return this._routerRoot._router }\n  })\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get () { return this._routerRoot._route }\n  })\n\n  Vue.component('RouterView', View)\n  Vue.component('RouterLink', Link)\n\n  const strats = Vue.config.optionMergeStrategies\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created\n}\n```\n主要关注核心的代码`Vue.mixin`部分，通过vue混入，给每个组件注入了`beforeCreate()`和`destory()`这两个生命周期。`beforeCreate()`主要执行了`vueRouter`的`init()`方法、`_route`转换为响应式、调用`registerInstance(this, this)`;`destory()`调用`registerInstance(this, this)`\n\n* 3、VueRouter init()源码\n``` javascript\ninit (app: any /* Vue component instance */) {\n    this.apps.push(app)\n\n    // set up app destroyed handler\n    // https://github.com/vuejs/vue-router/issues/2639\n    app.$once('hook:destroyed', () => {\n      // clean out app from this.apps array once destroyed\n      const index = this.apps.indexOf(app)\n      if (index > -1) this.apps.splice(index, 1)\n      // ensure we still have a main app or null if no apps\n      // we do not release the router so it can be reused\n      if (this.app === app) this.app = this.apps[0] || null\n\n      if (!this.app) this.history.teardown()\n    })\n\n    // main app previously initialized\n    // return as we don't need to set up new history listener\n    if (this.app) {\n      return\n    }\n\n    this.app = app\n\n    const history = this.history\n\n    if (history instanceof HTML5History || history instanceof HashHistory) {\n      const handleInitialScroll = routeOrError => {\n        const from = history.current\n        const expectScroll = this.options.scrollBehavior\n        const supportsScroll = supportsPushState && expectScroll\n\n        if (supportsScroll && 'fullPath' in routeOrError) {\n          handleScroll(this, routeOrError, from, false)\n        }\n      }\n      const setupListeners = routeOrError => {\n        history.setupListeners()\n        handleInitialScroll(routeOrError)\n      }\n      history.transitionTo(\n        history.getCurrentLocation(),\n        setupListeners,\n        setupListeners\n      )\n    }\n\n    history.listen(route => {\n      this.apps.forEach(app => {\n        app._route = route\n      })\n    })\n  }\n```\ninit 主要处理了handleInitialScroll（滚动条状态）、setupListeners（注册监听）、transitionTo（加载至匹配路由组件）\n\n* 4、VueRouter constructor源码\n``` javascript\nconstructor (options: RouterOptions = {}) {\n    this.app = null\n    this.apps = []\n    this.options = options\n    this.beforeHooks = []\n    this.resolveHooks = []\n    this.afterHooks = []\n    this.matcher = createMatcher(options.routes || [], this)\n\n    let mode = options.mode || 'hash'\n    this.fallback =\n      mode === 'history' && !supportsPushState && options.fallback !== false\n    if (this.fallback) {\n      mode = 'hash'\n    }\n    if (!inBrowser) {\n      mode = 'abstract'\n    }\n    this.mode = mode\n\n    switch (mode) {\n      case 'history':\n        this.history = new HTML5History(this, options.base)\n        break\n      case 'hash':\n        this.history = new HashHistory(this, options.base, this.fallback)\n        break\n      case 'abstract':\n        this.history = new AbstractHistory(this, options.base)\n        break\n      default:\n        if (process.env.NODE_ENV !== 'production') {\n          assert(false, `invalid mode: ${mode}`)\n        }\n    }\n  }\n```\n根据不同的`mode`创建不同的history实例，且默认为hash路由。\nHTML5History、HashHistory、AbstractHistory都继承了History类，其中go、push、replace、ensureURL、getCurrentLocation、setupListeners由各自特性不同，有各自的实现。\n主要来对比 HTML5History、HashHistory这push、replace两个接口的实现\n\n    * push\n    ``` javascript\n    // hash mode\n    push (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(\n        location,\n        route => {\n            pushHash(route.fullPath)\n            handleScroll(this.router, route, fromRoute, false)\n            onComplete && onComplete(route)\n        },\n        onAbort\n        )\n    }\n    \n    function pushHash (path) {\n        if (supportsPushState) {\n            pushState(getUrl(path))\n        } else {\n            window.location.hash = path\n        }\n    }\n    ```\n    ``` javascript\n    // html5 mode\n    push (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(location, route => {\n        pushState(cleanPath(this.base + route.fullPath))\n        handleScroll(this.router, route, fromRoute, false)\n        onComplete && onComplete(route)\n        }, onAbort)\n    }\n\n    export function pushState (url?: string, replace?: boolean) {\n        saveScrollPosition()\n        // try...catch the pushState call to get around Safari\n        // DOM Exception 18 where it limits to 100 pushState calls\n        const history = window.history\n        try {\n            if (replace) {\n            // preserve existing history state as it could be overriden by the user\n            const stateCopy = extend({}, history.state)\n            stateCopy.key = getStateKey()\n            history.replaceState(stateCopy, '', url)\n            } else {\n            history.pushState({ key: setStateKey(genStateKey()) }, '', url)\n            }\n        } catch (e) {\n            window.location[replace ? 'replace' : 'assign'](url)\n        }\n    }\n    ```\n\n    * replace\n    ``` javascript\n    // hash mode\n    replace (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(\n        location,\n        route => {\n            replaceHash(route.fullPath)\n            handleScroll(this.router, route, fromRoute, false)\n            onComplete && onComplete(route)\n        },\n        onAbort\n        )\n    }\n\n    function replaceHash (path) {\n        if (supportsPushState) {\n            replaceState(getUrl(path))\n        } else {\n            window.location.replace(getUrl(path))\n        }\n    }\n    ```\n\n    ``` javascript\n    // html5 mode\n    replace (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n        const { current: fromRoute } = this\n        this.transitionTo(location, route => {\n        replaceState(cleanPath(this.base + route.fullPath))\n        handleScroll(this.router, route, fromRoute, false)\n        onComplete && onComplete(route)\n        }, onAbort)\n    }\n\n    export function replaceState (url?: string) {\n        pushState(url, true)\n    }\n    ```\n\n继续回到 transitionTo（）方法，通过location匹配到路由组件\n``` javascript\nmatch (raw: RawLocation, current?: Route, redirectedFrom?: Location): Route {\n    return this.matcher.match(raw, current, redirectedFrom)\n}\n```\nmatch源码\n``` javascript\nfunction match (\n    raw: RawLocation,\n    currentRoute?: Route,\n    redirectedFrom?: Location\n  ): Route {\n    const location = normalizeLocation(raw, currentRoute, false, router)\n    const { name } = location\n\n    if (name) {\n      const record = nameMap[name]\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, `Route with name '${name}' does not exist`)\n      }\n      if (!record) return _createRoute(null, location)\n      const paramNames = record.regex.keys\n        .filter(key => !key.optional)\n        .map(key => key.name)\n\n      if (typeof location.params !== 'object') {\n        location.params = {}\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (const key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key]\n          }\n        }\n      }\n\n      location.path = fillParams(record.path, location.params, `named route \"${name}\"`)\n      return _createRoute(record, location, redirectedFrom)\n    } else if (location.path) {\n      location.params = {}\n      for (let i = 0; i < pathList.length; i++) {\n        const path = pathList[i]\n        const record = pathMap[path]\n        if (matchRoute(record.regex, location.path, location.params)) {\n          return _createRoute(record, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n}\n```\n\n\n","slug":"vue/vue-router","published":1,"updated":"2021-03-04T07:21:19.727Z","_id":"ckluievqi000fa2sybwougxzf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"后端路由和前端路由\"><a href=\"#后端路由和前端路由\" class=\"headerlink\" title=\"后端路由和前端路由\"></a>后端路由和前端路由</h2><h3 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h3><p>当页面切换的时候，浏览器会向服务器发送不同的URL，服务器接收到不同的URL,解析生成不同的页面，发送给浏览器，浏览器将页面进行渲染展示。</p>\n<h3 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h3><p>在页面切换的时候，不会向浏览器发送请求，从而保证页面不刷新。</p>\n<h2 id=\"前端路由实现的原理\"><a href=\"#前端路由实现的原理\" class=\"headerlink\" title=\"前端路由实现的原理\"></a>前端路由实现的原理</h2><p>实现前端路由，需解决2个问题：</p>\n<ul>\n<li>1、实现url变化，页面不刷新</li>\n<li>2、捕获url变化，执行页面替换逻辑</li>\n</ul>\n<h3 id=\"前端路由两种实现\"><a href=\"#前端路由两种实现\" class=\"headerlink\" title=\"前端路由两种实现\"></a>前端路由两种实现</h3><ul>\n<li><p>1、hash路由<br><a href=\"http://www.xxx.com/#/login\" target=\"_blank\" rel=\"noopener\">http://www.xxx.com/#/login</a><br>满足条件：</p>\n<blockquote>\n<p>#后面hash值的变化，不会向浏览器发送请求<br>location.hash可获取到#号后hash值；location.hash=”xxx”可替换#后hash值<br>可通过window.addEventListener捕获hashchange事件，来执行页面替换的逻辑</p>\n</blockquote>\n</li>\n<li><p>2、history路由<br><a href=\"http://www.xxx.com/login\" target=\"_blank\" rel=\"noopener\">http://www.xxx.com/login</a><br>满足条件：</p>\n<blockquote>\n<p>基于Html5 history 新增的API,通过该api改变url地址，不会向浏览器发送请求<br>pushState()、replaceState()<br>可通过window.addEventListener捕获popstate事件,来执行页面替换的逻辑</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"vue-router实现方式\"><a href=\"#vue-router实现方式\" class=\"headerlink\" title=\"vue-router实现方式\"></a>vue-router实现方式</h2><p>vue通过全局方法Vue.use()使用插件，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用VueRouter.install(vue)</span></span><br><span class=\"line\">vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... 组件选项</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1、vue.use()的源码实现（注：vue源码）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">plugin: Function | Object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> installedPlugins = (<span class=\"keyword\">this</span>._installedPlugins || (<span class=\"keyword\">this</span>._installedPlugins = []))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (installedPlugins.indexOf(plugin) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional parameters</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = toArray(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    args.unshift(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin.install === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      plugin.install.apply(plugin, args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      plugin.apply(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    installedPlugins.push(plugin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>VueRouter插件定义了install方法，并执行install方法</li>\n<li>把VueRouter插件存储到installedPlugins</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>2、VueRouter install源码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class=\"keyword\">return</span></span><br><span class=\"line\">  install.installed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _Vue = Vue</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isDef = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v !== <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> registerInstance = <span class=\"function\">(<span class=\"params\">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = vm.$options._parentVnode</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class=\"line\">      i(vm, callVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.mixin(&#123;</span><br><span class=\"line\">    beforeCreate () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(<span class=\"keyword\">this</span>.$options.router)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._routerRoot = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._router = <span class=\"keyword\">this</span>.$options.router</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._router.init(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        Vue.util.defineReactive(<span class=\"keyword\">this</span>, <span class=\"string\">'_route'</span>, <span class=\"keyword\">this</span>._router.history.current)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._routerRoot = (<span class=\"keyword\">this</span>.$parent &amp;&amp; <span class=\"keyword\">this</span>.$parent._routerRoot) || <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      registerInstance(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    destroyed () &#123;</span><br><span class=\"line\">      registerInstance(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">'$router'</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> () &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._routerRoot._router &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">'$route'</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> () &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._routerRoot._route &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.component(<span class=\"string\">'RouterView'</span>, View)</span><br><span class=\"line\">  Vue.component(<span class=\"string\">'RouterLink'</span>, Link)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class=\"line\">  <span class=\"comment\">// use the same hook merging strategy for route hooks</span></span><br><span class=\"line\">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要关注核心的代码<code>Vue.mixin</code>部分，通过vue混入，给每个组件注入了<code>beforeCreate()</code>和<code>destory()</code>这两个生命周期。<code>beforeCreate()</code>主要执行了<code>vueRouter</code>的<code>init()</code>方法、<code>_route</code>转换为响应式、调用<code>registerInstance(this, this)</code>;<code>destory()</code>调用<code>registerInstance(this, this)</code></p>\n</li>\n<li><p>3、VueRouter init()源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init (app: any <span class=\"comment\">/* Vue component instance */</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.apps.push(app)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set up app destroyed handler</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/vuejs/vue-router/issues/2639</span></span><br><span class=\"line\">    app.$once(<span class=\"string\">'hook:destroyed'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// clean out app from this.apps array once destroyed</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.apps.indexOf(app)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">-1</span>) <span class=\"keyword\">this</span>.apps.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"comment\">// ensure we still have a main app or null if no apps</span></span><br><span class=\"line\">      <span class=\"comment\">// we do not release the router so it can be reused</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.app === app) <span class=\"keyword\">this</span>.app = <span class=\"keyword\">this</span>.apps[<span class=\"number\">0</span>] || <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.app) <span class=\"keyword\">this</span>.history.teardown()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// main app previously initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// return as we don't need to set up new history listener</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.app) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.app = app</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.history</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (history <span class=\"keyword\">instanceof</span> HTML5History || history <span class=\"keyword\">instanceof</span> HashHistory) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handleInitialScroll = <span class=\"function\"><span class=\"params\">routeOrError</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">from</span> = history.current</span><br><span class=\"line\">        <span class=\"keyword\">const</span> expectScroll = <span class=\"keyword\">this</span>.options.scrollBehavior</span><br><span class=\"line\">        <span class=\"keyword\">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (supportsScroll &amp;&amp; <span class=\"string\">'fullPath'</span> <span class=\"keyword\">in</span> routeOrError) &#123;</span><br><span class=\"line\">          handleScroll(<span class=\"keyword\">this</span>, routeOrError, <span class=\"keyword\">from</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> setupListeners = <span class=\"function\"><span class=\"params\">routeOrError</span> =&gt;</span> &#123;</span><br><span class=\"line\">        history.setupListeners()</span><br><span class=\"line\">        handleInitialScroll(routeOrError)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      history.transitionTo(</span><br><span class=\"line\">        history.getCurrentLocation(),</span><br><span class=\"line\">        setupListeners,</span><br><span class=\"line\">        setupListeners</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    history.listen(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.apps.forEach(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        app._route = route</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>init 主要处理了handleInitialScroll（滚动条状态）、setupListeners（注册监听）、transitionTo（加载至匹配路由组件）</p>\n</li>\n<li><p>4、VueRouter constructor源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> (options: RouterOptions = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.app = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.apps = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.beforeHooks = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resolveHooks = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.afterHooks = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.matcher = createMatcher(options.routes || [], <span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mode = options.mode || <span class=\"string\">'hash'</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fallback =</span><br><span class=\"line\">      mode === <span class=\"string\">'history'</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fallback) &#123;</span><br><span class=\"line\">      mode = <span class=\"string\">'hash'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!inBrowser) &#123;</span><br><span class=\"line\">      mode = <span class=\"string\">'abstract'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mode = mode</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'history'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> HTML5History(<span class=\"keyword\">this</span>, options.base)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'hash'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> HashHistory(<span class=\"keyword\">this</span>, options.base, <span class=\"keyword\">this</span>.fallback)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'abstract'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> AbstractHistory(<span class=\"keyword\">this</span>, options.base)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">          assert(<span class=\"literal\">false</span>, <span class=\"string\">`invalid mode: <span class=\"subst\">$&#123;mode&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>根据不同的<code>mode</code>创建不同的history实例，且默认为hash路由。<br>HTML5History、HashHistory、AbstractHistory都继承了History类，其中go、push、replace、ensureURL、getCurrentLocation、setupListeners由各自特性不同，有各自的实现。<br>主要来对比 HTML5History、HashHistory这push、replace两个接口的实现</p>\n<ul>\n<li><p>push</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash mode</span></span><br><span class=\"line\">push (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    route =&gt; &#123;</span><br><span class=\"line\">        pushHash(route.fullPath)</span><br><span class=\"line\">        handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onAbort</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushHash</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportsPushState) &#123;</span><br><span class=\"line\">        pushState(getUrl(path))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.hash = path</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html5 mode</span></span><br><span class=\"line\">push (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class=\"line\">    pushState(cleanPath(<span class=\"keyword\">this</span>.base + route.fullPath))</span><br><span class=\"line\">    handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;, onAbort)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushState</span> (<span class=\"params\">url?: string, replace?: boolean</span>) </span>&#123;</span><br><span class=\"line\">    saveScrollPosition()</span><br><span class=\"line\">    <span class=\"comment\">// try...catch the pushState call to get around Safari</span></span><br><span class=\"line\">    <span class=\"comment\">// DOM Exception 18 where it limits to 100 pushState calls</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"built_in\">window</span>.history</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (replace) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// preserve existing history state as it could be overriden by the user</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> stateCopy = extend(&#123;&#125;, history.state)</span><br><span class=\"line\">        stateCopy.key = getStateKey()</span><br><span class=\"line\">        history.replaceState(stateCopy, <span class=\"string\">''</span>, url)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        history.pushState(&#123; <span class=\"attr\">key</span>: setStateKey(genStateKey()) &#125;, <span class=\"string\">''</span>, url)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location[replace ? <span class=\"string\">'replace'</span> : <span class=\"string\">'assign'</span>](url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>replace</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash mode</span></span><br><span class=\"line\">replace (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    route =&gt; &#123;</span><br><span class=\"line\">        replaceHash(route.fullPath)</span><br><span class=\"line\">        handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onAbort</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceHash</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportsPushState) &#123;</span><br><span class=\"line\">        replaceState(getUrl(path))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.replace(getUrl(path))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html5 mode</span></span><br><span class=\"line\">replace (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class=\"line\">    replaceState(cleanPath(<span class=\"keyword\">this</span>.base + route.fullPath))</span><br><span class=\"line\">    handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;, onAbort)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceState</span> (<span class=\"params\">url?: string</span>) </span>&#123;</span><br><span class=\"line\">    pushState(url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p>继续回到 transitionTo（）方法，通过location匹配到路由组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match (raw: RawLocation, current?: Route, redirectedFrom?: Location): Route &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.matcher.match(raw, current, redirectedFrom)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>match源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    raw: RawLocation,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    currentRoute?: Route,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    redirectedFrom?: Location</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>): <span class=\"title\">Route</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> location = normalizeLocation(raw, currentRoute, <span class=\"literal\">false</span>, router)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = location</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> record = nameMap[name]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">        warn(record, <span class=\"string\">`Route with name '<span class=\"subst\">$&#123;name&#125;</span>' does not exist`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> _createRoute(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> paramNames = record.regex.keys</span><br><span class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.optional)</span><br><span class=\"line\">        .map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key.name)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> location.params !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        location.params = &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentRoute &amp;&amp; <span class=\"keyword\">typeof</span> currentRoute.params === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> currentRoute.params) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> location.params) &amp;&amp; paramNames.indexOf(key) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            location.params[key] = currentRoute.params[key]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      location.path = fillParams(record.path, location.params, <span class=\"string\">`named route \"<span class=\"subst\">$&#123;name&#125;</span>\"`</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (location.path) &#123;</span><br><span class=\"line\">      location.params = &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; pathList.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = pathList[i]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> record = pathMap[path]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matchRoute(record.regex, location.path, location.params)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// no match</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _createRoute(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"后端路由和前端路由\"><a href=\"#后端路由和前端路由\" class=\"headerlink\" title=\"后端路由和前端路由\"></a>后端路由和前端路由</h2><h3 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h3><p>当页面切换的时候，浏览器会向服务器发送不同的URL，服务器接收到不同的URL,解析生成不同的页面，发送给浏览器，浏览器将页面进行渲染展示。</p>\n<h3 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h3><p>在页面切换的时候，不会向浏览器发送请求，从而保证页面不刷新。</p>\n<h2 id=\"前端路由实现的原理\"><a href=\"#前端路由实现的原理\" class=\"headerlink\" title=\"前端路由实现的原理\"></a>前端路由实现的原理</h2><p>实现前端路由，需解决2个问题：</p>\n<ul>\n<li>1、实现url变化，页面不刷新</li>\n<li>2、捕获url变化，执行页面替换逻辑</li>\n</ul>\n<h3 id=\"前端路由两种实现\"><a href=\"#前端路由两种实现\" class=\"headerlink\" title=\"前端路由两种实现\"></a>前端路由两种实现</h3><ul>\n<li><p>1、hash路由<br><a href=\"http://www.xxx.com/#/login\" target=\"_blank\" rel=\"noopener\">http://www.xxx.com/#/login</a><br>满足条件：</p>\n<blockquote>\n<p>#后面hash值的变化，不会向浏览器发送请求<br>location.hash可获取到#号后hash值；location.hash=”xxx”可替换#后hash值<br>可通过window.addEventListener捕获hashchange事件，来执行页面替换的逻辑</p>\n</blockquote>\n</li>\n<li><p>2、history路由<br><a href=\"http://www.xxx.com/login\" target=\"_blank\" rel=\"noopener\">http://www.xxx.com/login</a><br>满足条件：</p>\n<blockquote>\n<p>基于Html5 history 新增的API,通过该api改变url地址，不会向浏览器发送请求<br>pushState()、replaceState()<br>可通过window.addEventListener捕获popstate事件,来执行页面替换的逻辑</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"vue-router实现方式\"><a href=\"#vue-router实现方式\" class=\"headerlink\" title=\"vue-router实现方式\"></a>vue-router实现方式</h2><p>vue通过全局方法Vue.use()使用插件，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用VueRouter.install(vue)</span></span><br><span class=\"line\">vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... 组件选项</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1、vue.use()的源码实现（注：vue源码）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">plugin: Function | Object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> installedPlugins = (<span class=\"keyword\">this</span>._installedPlugins || (<span class=\"keyword\">this</span>._installedPlugins = []))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (installedPlugins.indexOf(plugin) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional parameters</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = toArray(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    args.unshift(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin.install === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      plugin.install.apply(plugin, args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      plugin.apply(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    installedPlugins.push(plugin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>VueRouter插件定义了install方法，并执行install方法</li>\n<li>把VueRouter插件存储到installedPlugins</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>2、VueRouter install源码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class=\"keyword\">return</span></span><br><span class=\"line\">  install.installed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _Vue = Vue</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isDef = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v !== <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> registerInstance = <span class=\"function\">(<span class=\"params\">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = vm.$options._parentVnode</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class=\"line\">      i(vm, callVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.mixin(&#123;</span><br><span class=\"line\">    beforeCreate () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(<span class=\"keyword\">this</span>.$options.router)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._routerRoot = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._router = <span class=\"keyword\">this</span>.$options.router</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._router.init(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        Vue.util.defineReactive(<span class=\"keyword\">this</span>, <span class=\"string\">'_route'</span>, <span class=\"keyword\">this</span>._router.history.current)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._routerRoot = (<span class=\"keyword\">this</span>.$parent &amp;&amp; <span class=\"keyword\">this</span>.$parent._routerRoot) || <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      registerInstance(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    destroyed () &#123;</span><br><span class=\"line\">      registerInstance(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">'$router'</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> () &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._routerRoot._router &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">'$route'</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> () &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._routerRoot._route &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.component(<span class=\"string\">'RouterView'</span>, View)</span><br><span class=\"line\">  Vue.component(<span class=\"string\">'RouterLink'</span>, Link)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class=\"line\">  <span class=\"comment\">// use the same hook merging strategy for route hooks</span></span><br><span class=\"line\">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要关注核心的代码<code>Vue.mixin</code>部分，通过vue混入，给每个组件注入了<code>beforeCreate()</code>和<code>destory()</code>这两个生命周期。<code>beforeCreate()</code>主要执行了<code>vueRouter</code>的<code>init()</code>方法、<code>_route</code>转换为响应式、调用<code>registerInstance(this, this)</code>;<code>destory()</code>调用<code>registerInstance(this, this)</code></p>\n</li>\n<li><p>3、VueRouter init()源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init (app: any <span class=\"comment\">/* Vue component instance */</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.apps.push(app)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set up app destroyed handler</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/vuejs/vue-router/issues/2639</span></span><br><span class=\"line\">    app.$once(<span class=\"string\">'hook:destroyed'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// clean out app from this.apps array once destroyed</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.apps.indexOf(app)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">-1</span>) <span class=\"keyword\">this</span>.apps.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"comment\">// ensure we still have a main app or null if no apps</span></span><br><span class=\"line\">      <span class=\"comment\">// we do not release the router so it can be reused</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.app === app) <span class=\"keyword\">this</span>.app = <span class=\"keyword\">this</span>.apps[<span class=\"number\">0</span>] || <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.app) <span class=\"keyword\">this</span>.history.teardown()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// main app previously initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// return as we don't need to set up new history listener</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.app) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.app = app</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.history</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (history <span class=\"keyword\">instanceof</span> HTML5History || history <span class=\"keyword\">instanceof</span> HashHistory) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handleInitialScroll = <span class=\"function\"><span class=\"params\">routeOrError</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">from</span> = history.current</span><br><span class=\"line\">        <span class=\"keyword\">const</span> expectScroll = <span class=\"keyword\">this</span>.options.scrollBehavior</span><br><span class=\"line\">        <span class=\"keyword\">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (supportsScroll &amp;&amp; <span class=\"string\">'fullPath'</span> <span class=\"keyword\">in</span> routeOrError) &#123;</span><br><span class=\"line\">          handleScroll(<span class=\"keyword\">this</span>, routeOrError, <span class=\"keyword\">from</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> setupListeners = <span class=\"function\"><span class=\"params\">routeOrError</span> =&gt;</span> &#123;</span><br><span class=\"line\">        history.setupListeners()</span><br><span class=\"line\">        handleInitialScroll(routeOrError)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      history.transitionTo(</span><br><span class=\"line\">        history.getCurrentLocation(),</span><br><span class=\"line\">        setupListeners,</span><br><span class=\"line\">        setupListeners</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    history.listen(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.apps.forEach(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        app._route = route</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>init 主要处理了handleInitialScroll（滚动条状态）、setupListeners（注册监听）、transitionTo（加载至匹配路由组件）</p>\n</li>\n<li><p>4、VueRouter constructor源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> (options: RouterOptions = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.app = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.apps = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.beforeHooks = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resolveHooks = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.afterHooks = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.matcher = createMatcher(options.routes || [], <span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mode = options.mode || <span class=\"string\">'hash'</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fallback =</span><br><span class=\"line\">      mode === <span class=\"string\">'history'</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fallback) &#123;</span><br><span class=\"line\">      mode = <span class=\"string\">'hash'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!inBrowser) &#123;</span><br><span class=\"line\">      mode = <span class=\"string\">'abstract'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mode = mode</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'history'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> HTML5History(<span class=\"keyword\">this</span>, options.base)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'hash'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> HashHistory(<span class=\"keyword\">this</span>, options.base, <span class=\"keyword\">this</span>.fallback)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'abstract'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> AbstractHistory(<span class=\"keyword\">this</span>, options.base)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">          assert(<span class=\"literal\">false</span>, <span class=\"string\">`invalid mode: <span class=\"subst\">$&#123;mode&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>根据不同的<code>mode</code>创建不同的history实例，且默认为hash路由。<br>HTML5History、HashHistory、AbstractHistory都继承了History类，其中go、push、replace、ensureURL、getCurrentLocation、setupListeners由各自特性不同，有各自的实现。<br>主要来对比 HTML5History、HashHistory这push、replace两个接口的实现</p>\n<ul>\n<li><p>push</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash mode</span></span><br><span class=\"line\">push (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    route =&gt; &#123;</span><br><span class=\"line\">        pushHash(route.fullPath)</span><br><span class=\"line\">        handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onAbort</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushHash</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportsPushState) &#123;</span><br><span class=\"line\">        pushState(getUrl(path))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.hash = path</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html5 mode</span></span><br><span class=\"line\">push (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class=\"line\">    pushState(cleanPath(<span class=\"keyword\">this</span>.base + route.fullPath))</span><br><span class=\"line\">    handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;, onAbort)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushState</span> (<span class=\"params\">url?: string, replace?: boolean</span>) </span>&#123;</span><br><span class=\"line\">    saveScrollPosition()</span><br><span class=\"line\">    <span class=\"comment\">// try...catch the pushState call to get around Safari</span></span><br><span class=\"line\">    <span class=\"comment\">// DOM Exception 18 where it limits to 100 pushState calls</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"built_in\">window</span>.history</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (replace) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// preserve existing history state as it could be overriden by the user</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> stateCopy = extend(&#123;&#125;, history.state)</span><br><span class=\"line\">        stateCopy.key = getStateKey()</span><br><span class=\"line\">        history.replaceState(stateCopy, <span class=\"string\">''</span>, url)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        history.pushState(&#123; <span class=\"attr\">key</span>: setStateKey(genStateKey()) &#125;, <span class=\"string\">''</span>, url)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location[replace ? <span class=\"string\">'replace'</span> : <span class=\"string\">'assign'</span>](url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>replace</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash mode</span></span><br><span class=\"line\">replace (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    route =&gt; &#123;</span><br><span class=\"line\">        replaceHash(route.fullPath)</span><br><span class=\"line\">        handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onAbort</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceHash</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportsPushState) &#123;</span><br><span class=\"line\">        replaceState(getUrl(path))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.replace(getUrl(path))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html5 mode</span></span><br><span class=\"line\">replace (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class=\"line\">    replaceState(cleanPath(<span class=\"keyword\">this</span>.base + route.fullPath))</span><br><span class=\"line\">    handleScroll(<span class=\"keyword\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;, onAbort)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceState</span> (<span class=\"params\">url?: string</span>) </span>&#123;</span><br><span class=\"line\">    pushState(url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p>继续回到 transitionTo（）方法，通过location匹配到路由组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match (raw: RawLocation, current?: Route, redirectedFrom?: Location): Route &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.matcher.match(raw, current, redirectedFrom)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>match源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    raw: RawLocation,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    currentRoute?: Route,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    redirectedFrom?: Location</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>): <span class=\"title\">Route</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> location = normalizeLocation(raw, currentRoute, <span class=\"literal\">false</span>, router)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = location</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> record = nameMap[name]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">        warn(record, <span class=\"string\">`Route with name '<span class=\"subst\">$&#123;name&#125;</span>' does not exist`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> _createRoute(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> paramNames = record.regex.keys</span><br><span class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.optional)</span><br><span class=\"line\">        .map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key.name)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> location.params !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        location.params = &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentRoute &amp;&amp; <span class=\"keyword\">typeof</span> currentRoute.params === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> currentRoute.params) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> location.params) &amp;&amp; paramNames.indexOf(key) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            location.params[key] = currentRoute.params[key]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      location.path = fillParams(record.path, location.params, <span class=\"string\">`named route \"<span class=\"subst\">$&#123;name&#125;</span>\"`</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (location.path) &#123;</span><br><span class=\"line\">      location.params = &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; pathList.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = pathList[i]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> record = pathMap[path]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matchRoute(record.regex, location.path, location.params)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// no match</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _createRoute(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"vuex 源码解析","date":"2021-02-19T12:49:44.000Z","_content":"","source":"_posts/vue/vuex.md","raw":"---\ntitle: vuex 源码解析\ndate: 2021-02-19 20:49:44\ntags: [Vuex,Vue]\ncategories: VUE\n---","slug":"vue/vuex","published":1,"updated":"2021-03-04T07:21:22.158Z","_id":"ckluikvh50000gdsyffmh5g07","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vue2.0响应式原理","date":"2020-07-16T01:49:44.000Z","_content":"\n\n在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。\n\n<!-- more -->\n\n### 基础知识\n在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。\n\n#### Object.defineProperty\nObject.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\nECMAScript有两种属性:数据属性和访问器属性\n* 数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；\n* 访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。\n\n``` javascript\nvar obj = {};\nvar a;\nObject.defineProperty(obj, 'a', {\n  get: function() {\n    console.log('get val');　\n    return a;\n  },\n  set: function(newVal) {\n    console.log('set val:' + newVal);\n    a = newVal;\n  }\n});\nobj.a;     // get val \nobj.a = '111'; // set val: 111\n```\n\n示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。\nVue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。\n\n#### 观察者模式\nvue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。\n观察者模式的基本要素\n* Subject (目标)\n* Observer （观察者）\n\n{% img /images/vue/observer.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n定义一个收集所有依赖的容器\n```javascript\n// 目标者类\nclass Subject {\n  constructor() {\n    this.observers = []\n  }\n  // 添加\n  add(observer) {\n    this.observers.push(observer)\n  }\n  // 删除\n  remove(observer) {\n    let idx = this.observers.find(observer)\n    idx > -1 && this.observers.splice(idx,1)\n  }\n  // 通知\n  notify() {\n    for(let oberver of this.observers) {\n      observer.update()\n    }\n  }\n}\n\n// 观察者类\nclass Observer{\n  constructor(name) {\n    this.name = name\n  }\n  update() {\n    console.log(`目标通知我更新了,我是${this.name}`)\n  }\n}\n```\n\n### 源码解析\n\n#### 整体概览\n下面就进入vue源码开始解析vue是如何实现响应式的。\n\nvue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在`init.js`文件中，找到在初始化的时候会执行`initState(vm)`,在`state.js`文件中找到`initData(vm)`,最终会执行 `observe(data, true /* asRootData */)`,最终找到核心的observe相关代码。\n\n\n由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift...）来实现监测改变。\n``` js {19-21}\n// observe/index.js\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    def(value, '__ob__', this)\n    // 分数组和对象来分别处理\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value) // 将数组转换成响应式\n    } else {\n      this.walk(value) // 将对象转换成响应式\n    }\n  }\n}\n```\n\n#### data是Object类型\n{% img /images/vue/observer1.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n\n``` js {18-45}\n// index.js\nwalk (obj: Object) {\n  const keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i])\n  }\n}\n\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep() // Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知\n  ... // 省略部分代码\n  let childOb = !shallow && observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() // get的时候开始收集依赖，将依赖存放在dep中,dep中存放的是什么？查看代码发现存放的是[Watcher，Watcher...]\n        if (childOb) {\n          childOb.dep.depend() // 收集依赖\n          if (Array.isArray(value)) {\n            dependArray(value) // 收集依赖\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      ... // 省略部分代码\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify() // 数据更新后调用dep 通知存放的所有的依赖\n    }\n  })\n}\n```\n\nDep (目标：Subject)\n``` js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    ... // 省略部分代码\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n```\n\nWatcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。\n他就是负责具体的脏活累活\n* 1、收集依赖\n* 2、负责执行cb来更新所有的依赖\n \n``` js\n// Watcher.js\nexport default class Watcher {\n  ... // 省略部分代码\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function\n  ) {\n    this.vm = vm\n    ... // 省略部分代码\n    this.cb = cb\n    ... // 省略部分代码\n    this.expression = process.env.NODE_ENV !== 'production'\n      ? expOrFn.toString()\n      : ''\n    // parse expression for getter\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      ... // 省略部分代码\n    }\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n  }\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n  get () {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    value = this.getter.call(vm, vm)\n    ... // 省略部分代码\n    return value\n  }\n\n  /**\n   * Add a dependency to this directive.\n   */\n  addDep (dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n\n  update () {\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this)\n    }\n  }\n\n  run () {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n        }\n      }\n    }\n  }\n\n  depend () {\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].depend()\n    }\n  }\n}\n```\n\n#### data是Array类型\n{% img /images/vue/array.png 440 320\"点击查看大图:vi/vim-cheat-sheet\" %}\n\n当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。\n``` js\n// 拦截器方法\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 数组变化时，会调用dep 目标去通知所有的依赖进行更新\n    return result\n  })\n})\n```\n``` js \n\nimport { arrayMethods } from './array'\nconst arrayKeys = Object.getOwnPropertyNames(arrayMethods)\n\nexport class Observer {\n  ...\n  constructor (value: any) {\n    ...\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      if (hasProto) { // 判断浏览器是否支持 __proto__\n        protoAugment(value, arrayMethods) // 使用__proto__将拦截器中的方法直接覆盖原型\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys) // 通过复制将拦截器中的方法挂载到value上\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n}\n\n// 使用 __proto__ 覆盖原型\nfunction protoAugment (target, src: Object) {\n  target.__proto__ = src\n}\n\n// 通过复制将拦截器中的方法挂载到value上\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n```\n","source":"_posts/vue-reactive.md","raw":"---\ntitle: vue2.0响应式原理\ndate: 2020-07-16 09:49:44\ntags:\ncategories: VUE\n---\n\n\n在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。\n\n<!-- more -->\n\n### 基础知识\n在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。\n\n#### Object.defineProperty\nObject.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\nECMAScript有两种属性:数据属性和访问器属性\n* 数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；\n* 访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。\n\n``` javascript\nvar obj = {};\nvar a;\nObject.defineProperty(obj, 'a', {\n  get: function() {\n    console.log('get val');　\n    return a;\n  },\n  set: function(newVal) {\n    console.log('set val:' + newVal);\n    a = newVal;\n  }\n});\nobj.a;     // get val \nobj.a = '111'; // set val: 111\n```\n\n示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。\nVue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。\n\n#### 观察者模式\nvue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。\n观察者模式的基本要素\n* Subject (目标)\n* Observer （观察者）\n\n{% img /images/vue/observer.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n定义一个收集所有依赖的容器\n```javascript\n// 目标者类\nclass Subject {\n  constructor() {\n    this.observers = []\n  }\n  // 添加\n  add(observer) {\n    this.observers.push(observer)\n  }\n  // 删除\n  remove(observer) {\n    let idx = this.observers.find(observer)\n    idx > -1 && this.observers.splice(idx,1)\n  }\n  // 通知\n  notify() {\n    for(let oberver of this.observers) {\n      observer.update()\n    }\n  }\n}\n\n// 观察者类\nclass Observer{\n  constructor(name) {\n    this.name = name\n  }\n  update() {\n    console.log(`目标通知我更新了,我是${this.name}`)\n  }\n}\n```\n\n### 源码解析\n\n#### 整体概览\n下面就进入vue源码开始解析vue是如何实现响应式的。\n\nvue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在`init.js`文件中，找到在初始化的时候会执行`initState(vm)`,在`state.js`文件中找到`initData(vm)`,最终会执行 `observe(data, true /* asRootData */)`,最终找到核心的observe相关代码。\n\n\n由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift...）来实现监测改变。\n``` js {19-21}\n// observe/index.js\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    def(value, '__ob__', this)\n    // 分数组和对象来分别处理\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value) // 将数组转换成响应式\n    } else {\n      this.walk(value) // 将对象转换成响应式\n    }\n  }\n}\n```\n\n#### data是Object类型\n{% img /images/vue/observer1.png \"点击查看大图:vi/vim-cheat-sheet\" %}\n\n\n``` js {18-45}\n// index.js\nwalk (obj: Object) {\n  const keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i])\n  }\n}\n\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep() // Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知\n  ... // 省略部分代码\n  let childOb = !shallow && observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend() // get的时候开始收集依赖，将依赖存放在dep中,dep中存放的是什么？查看代码发现存放的是[Watcher，Watcher...]\n        if (childOb) {\n          childOb.dep.depend() // 收集依赖\n          if (Array.isArray(value)) {\n            dependArray(value) // 收集依赖\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      ... // 省略部分代码\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify() // 数据更新后调用dep 通知存放的所有的依赖\n    }\n  })\n}\n```\n\nDep (目标：Subject)\n``` js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    ... // 省略部分代码\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n```\n\nWatcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。\n他就是负责具体的脏活累活\n* 1、收集依赖\n* 2、负责执行cb来更新所有的依赖\n \n``` js\n// Watcher.js\nexport default class Watcher {\n  ... // 省略部分代码\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function\n  ) {\n    this.vm = vm\n    ... // 省略部分代码\n    this.cb = cb\n    ... // 省略部分代码\n    this.expression = process.env.NODE_ENV !== 'production'\n      ? expOrFn.toString()\n      : ''\n    // parse expression for getter\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      ... // 省略部分代码\n    }\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n  }\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n  get () {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    value = this.getter.call(vm, vm)\n    ... // 省略部分代码\n    return value\n  }\n\n  /**\n   * Add a dependency to this directive.\n   */\n  addDep (dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n\n  update () {\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this)\n    }\n  }\n\n  run () {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue) // 具体的执行更新\n        }\n      }\n    }\n  }\n\n  depend () {\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].depend()\n    }\n  }\n}\n```\n\n#### data是Array类型\n{% img /images/vue/array.png 440 320\"点击查看大图:vi/vim-cheat-sheet\" %}\n\n当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。\n``` js\n// 拦截器方法\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify() // 数组变化时，会调用dep 目标去通知所有的依赖进行更新\n    return result\n  })\n})\n```\n``` js \n\nimport { arrayMethods } from './array'\nconst arrayKeys = Object.getOwnPropertyNames(arrayMethods)\n\nexport class Observer {\n  ...\n  constructor (value: any) {\n    ...\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      if (hasProto) { // 判断浏览器是否支持 __proto__\n        protoAugment(value, arrayMethods) // 使用__proto__将拦截器中的方法直接覆盖原型\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys) // 通过复制将拦截器中的方法挂载到value上\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n}\n\n// 使用 __proto__ 覆盖原型\nfunction protoAugment (target, src: Object) {\n  target.__proto__ = src\n}\n\n// 通过复制将拦截器中的方法挂载到value上\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n```\n","slug":"vue-reactive","published":1,"updated":"2021-03-04T07:20:10.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklujk5cd0000qxsyehp25m0c","content":"<p>在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p>在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。</p>\n<h4 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h4><p>Object.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<p>ECMAScript有两种属性:数据属性和访问器属性</p>\n<ul>\n<li>数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；</li>\n<li>访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get val'</span>);　</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set val:'</span> + newVal);</span><br><span class=\"line\">    a = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">obj.a;     <span class=\"comment\">// get val </span></span><br><span class=\"line\">obj.a = <span class=\"string\">'111'</span>; <span class=\"comment\">// set val: 111</span></span><br></pre></td></tr></table></figure>\n\n<p>示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。<br>Vue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>vue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。<br>观察者模式的基本要素</p>\n<ul>\n<li>Subject (目标)</li>\n<li>Observer （观察者）</li>\n</ul>\n<img src=\"/sblog/images/vue/observer.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n<p>定义一个收集所有依赖的容器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加</span></span><br><span class=\"line\">  add(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(observer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除</span></span><br><span class=\"line\">  remove(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"keyword\">this</span>.observers.find(observer)</span><br><span class=\"line\">    idx &gt; <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.observers.splice(idx,<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通知</span></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> oberver <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.observers) &#123;</span><br><span class=\"line\">      observer.update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`目标通知我更新了,我是<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"整体概览\"><a href=\"#整体概览\" class=\"headerlink\" title=\"整体概览\"></a>整体概览</h4><p>下面就进入vue源码开始解析vue是如何实现响应式的。</p>\n<p>vue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在<code>init.js</code>文件中，找到在初始化的时候会执行<code>initState(vm)</code>,在<code>state.js</code>文件中找到<code>initData(vm)</code>,最终会执行 <code>observe(data, true /* asRootData */)</code>,最终找到核心的observe相关代码。</p>\n<p>由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift…）来实现监测改变。</p>\n<figure class=\"highlight js\"><figcaption><span>&#123;19-21&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observe/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  value: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 分数组和对象来分别处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        protoAugment(value, arrayMethods)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value) <span class=\"comment\">// 将数组转换成响应式</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value) <span class=\"comment\">// 将对象转换成响应式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Object类型\"><a href=\"#data是Object类型\" class=\"headerlink\" title=\"data是Object类型\"></a>data是Object类型</h4><img src=\"/sblog/images/vue/observer1.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n\n<figure class=\"highlight js\"><figcaption><span>&#123;18-45&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\">walk (obj: <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    defineReactive(obj, keys[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  obj: Object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  val: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  customSetter?: ?Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  shallow?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知</span></span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() <span class=\"comment\">// get的时候开始收集依赖，将依赖存放在dep中,dep中存放的是什么？查看代码发现存放的是[Watcher，Watcher...]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend() <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value) <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">// 数据更新后调用dep 通知存放的所有的依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Dep (目标：Subject)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: ?Watcher;</span><br><span class=\"line\">  id: number;</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Watcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。<br>他就是负责具体的脏活累活</p>\n<ul>\n<li>1、收集依赖</li>\n<li>2、负责执行cb来更新所有的依赖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Watcher.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (</span><br><span class=\"line\">    vm: Component,</span><br><span class=\"line\">    expOrFn: string | Function,</span><br><span class=\"line\">    cb: Function</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.expression = process.env.NODE_ENV !== <span class=\"string\">'production'</span></span><br><span class=\"line\">      ? expOrFn.toString()</span><br><span class=\"line\">      : <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = parsePath(expOrFn)</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.lazy</span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>.vm</span><br><span class=\"line\">    value = <span class=\"keyword\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Add a dependency to this directive.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  addDep (dep: Dep) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDepIds.add(id)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDeps.push(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">        dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  update () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            handleError(e, <span class=\"keyword\">this</span>.vm, <span class=\"string\">`callback for watcher \"<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.expression&#125;</span>\"`</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deps[i].depend()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Array类型\"><a href=\"#data是Array类型\" class=\"headerlink\" title=\"data是Array类型\"></a>data是Array类型</h4><img src=\"/sblog/images/vue/array.png\" class=\"\" width=\"440\" title=\"320\" alt=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n<p>当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拦截器方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 数组变化时，会调用dep 目标去通知所有的依赖进行更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./array'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayKeys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(arrayMethods)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123; <span class=\"comment\">// 判断浏览器是否支持 __proto__</span></span><br><span class=\"line\">        protoAugment(value, arrayMethods) <span class=\"comment\">// 使用__proto__将拦截器中的方法直接覆盖原型</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys) <span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 __proto__ 覆盖原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: Object</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: Object, src: Object, keys: Array&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本文也是基于Object.defineProperty来介绍如何实现响应式，在下篇文章中也会基于Proxy来介绍Vue3.0如何实现响应式。</p>","more":"<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p>在解析源码的过程中，会针对Object.defineProperty、观察者模式为切入点解析vue是如何实现双向绑定，数据的变化来驱动视图的更新。</p>\n<h4 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h4><p>Object.defineProperty是ES5新添加的对象方法，该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<p>ECMAScript有两种属性:数据属性和访问器属性</p>\n<ul>\n<li>数据属性包含[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]；</li>\n<li>访问器属性包含一对set和get函数，在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据访问器属性包含[[Configurable]]、[[Enumerable]]、[[Get]]、[[Set]]。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get val'</span>);　</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set val:'</span> + newVal);</span><br><span class=\"line\">    a = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">obj.a;     <span class=\"comment\">// get val </span></span><br><span class=\"line\">obj.a = <span class=\"string\">'111'</span>; <span class=\"comment\">// set val: 111</span></span><br></pre></td></tr></table></figure>\n\n<p>示例代码中 Object.defineProperty 把 obj 的 a 属性转化为 getter 和 setter，可以实现 obj.a 的数据监控，Vue正式基于这个特性实现了响应式。<br>Vue 会遍历对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>vue是基于观察者模式来实现数据更新之后触发一系列的相关依赖来自动更新视图。那么先来了解一下什么是观察者模式，观察者模式是指一个对象维持一系列的依赖于他的对象，将有关状态变更自动的通知给他们。<br>观察者模式的基本要素</p>\n<ul>\n<li>Subject (目标)</li>\n<li>Observer （观察者）</li>\n</ul>\n<img src=\"/sblog/images/vue/observer.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n<p>定义一个收集所有依赖的容器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加</span></span><br><span class=\"line\">  add(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(observer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除</span></span><br><span class=\"line\">  remove(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"keyword\">this</span>.observers.find(observer)</span><br><span class=\"line\">    idx &gt; <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.observers.splice(idx,<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通知</span></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> oberver <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.observers) &#123;</span><br><span class=\"line\">      observer.update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`目标通知我更新了,我是<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"整体概览\"><a href=\"#整体概览\" class=\"headerlink\" title=\"整体概览\"></a>整体概览</h4><p>下面就进入vue源码开始解析vue是如何实现响应式的。</p>\n<p>vue在初始化的时候会做一系列的init操作，我们把关注的重点放在如何将data转换成响应式的数据。一步步的解析源码，在<code>init.js</code>文件中，找到在初始化的时候会执行<code>initState(vm)</code>,在<code>state.js</code>文件中找到<code>initData(vm)</code>,最终会执行 <code>observe(data, true /* asRootData */)</code>,最终找到核心的observe相关代码。</p>\n<p>由于javascript的限制，Object.defineProperty()不能监测到数组的改变，vue对数组和对象使用了2种不同的方式实现，对于Object类型来说，通过劫持getter和setter来实现监测改变；对于Array来说，通过拦截器，拦截数组相关api（push、pop、shift、unshift…）来实现监测改变。</p>\n<figure class=\"highlight js\"><figcaption><span>&#123;19-21&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observe/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  value: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 分数组和对象来分别处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        protoAugment(value, arrayMethods)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value) <span class=\"comment\">// 将数组转换成响应式</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value) <span class=\"comment\">// 将对象转换成响应式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Object类型\"><a href=\"#data是Object类型\" class=\"headerlink\" title=\"data是Object类型\"></a>data是Object类型</h4><img src=\"/sblog/images/vue/observer1.png\" class=\"\" title=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n\n<figure class=\"highlight js\"><figcaption><span>&#123;18-45&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\">walk (obj: <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    defineReactive(obj, keys[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  obj: Object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  val: any,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  customSetter?: ?Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  shallow?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep() <span class=\"comment\">// Dep 对应于观察者模式中的Subject，用户收集用户的依赖，以及发送通知</span></span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend() <span class=\"comment\">// get的时候开始收集依赖，将依赖存放在dep中,dep中存放的是什么？查看代码发现存放的是[Watcher，Watcher...]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend() <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value) <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">      dep.notify() <span class=\"comment\">// 数据更新后调用dep 通知存放的所有的依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Dep (目标：Subject)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: ?Watcher;</span><br><span class=\"line\">  id: number;</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Watcher是一个中介的角色，数据发生变化时通知它，然后它再通知其他地方。<br>他就是负责具体的脏活累活</p>\n<ul>\n<li>1、收集依赖</li>\n<li>2、负责执行cb来更新所有的依赖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Watcher.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (</span><br><span class=\"line\">    vm: Component,</span><br><span class=\"line\">    expOrFn: string | Function,</span><br><span class=\"line\">    cb: Function</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.expression = process.env.NODE_ENV !== <span class=\"string\">'production'</span></span><br><span class=\"line\">      ? expOrFn.toString()</span><br><span class=\"line\">      : <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = parsePath(expOrFn)</span><br><span class=\"line\">      ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.lazy</span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">    pushTarget(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>.vm</span><br><span class=\"line\">    value = <span class=\"keyword\">this</span>.getter.call(vm, vm)</span><br><span class=\"line\">    ... <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Add a dependency to this directive.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  addDep (dep: Dep) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDepIds.add(id)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newDeps.push(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">        dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  update () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            handleError(e, <span class=\"keyword\">this</span>.vm, <span class=\"string\">`callback for watcher \"<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.expression&#125;</span>\"`</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue) <span class=\"comment\">// 具体的执行更新</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deps[i].depend()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"data是Array类型\"><a href=\"#data是Array类型\" class=\"headerlink\" title=\"data是Array类型\"></a>data是Array类型</h4><img src=\"/sblog/images/vue/array.png\" class=\"\" width=\"440\" title=\"320\" alt=\"点击查看大图:vi&#x2F;vim-cheat-sheet\">\n\n<p>当访问数组中的方法时，由于添加了拦截器，当访问数组的方法时，会访问伪造的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拦截器方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> methodsToPatch = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">methodsToPatch.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify() <span class=\"comment\">// 数组变化时，会调用dep 目标去通知所有的依赖进行更新</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./array'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayKeys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(arrayMethods)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value: any) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123; <span class=\"comment\">// 判断浏览器是否支持 __proto__</span></span><br><span class=\"line\">        protoAugment(value, arrayMethods) <span class=\"comment\">// 使用__proto__将拦截器中的方法直接覆盖原型</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        copyAugment(value, arrayMethods, arrayKeys) <span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 __proto__ 覆盖原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: Object</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过复制将拦截器中的方法挂载到value上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: Object, src: Object, keys: Array&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckluievoo0000a2syeg51cxnp","category_id":"ckluievow0002a2syarzyeiw7","_id":"ckluievoy0003a2sy07o33pz3"},{"post_id":"ckluievqc0005a2sy5y04cp9i","category_id":"ckluievqe0007a2sya1db45h4","_id":"ckluievqj000ga2sygrufh6iw"},{"post_id":"ckluievqd0006a2sy5tpccefa","category_id":"ckluievqh000ca2sy7dry4qtr","_id":"ckluievql000la2syeby0djpf"},{"post_id":"ckluievqf0009a2sy6mqte5h6","category_id":"ckluievqh000ca2sy7dry4qtr","_id":"ckluievqm000pa2sy4v8bedeb"},{"post_id":"ckluievqg000aa2sy4oyke2jp","category_id":"ckluievqh000ca2sy7dry4qtr","_id":"ckluievqn000ra2sy8k8md2uo"},{"post_id":"ckluievqi000fa2sybwougxzf","category_id":"ckluievqh000ca2sy7dry4qtr","_id":"ckluiloyz0009gdsy6qxu84w7"},{"post_id":"ckluikvh50000gdsyffmh5g07","category_id":"ckluievqh000ca2sy7dry4qtr","_id":"ckluils5j000agdsygfd34uhj"},{"post_id":"cklujk5cd0000qxsyehp25m0c","category_id":"ckluievqh000ca2sy7dry4qtr","_id":"cklujk5cj0001qxsy8i80843b"}],"PostTag":[{"post_id":"ckluievqc0005a2sy5y04cp9i","tag_id":"ckluievqe0008a2syhhvngc0y","_id":"ckluievqi000ea2sy7tse2xdy"},{"post_id":"ckluievqd0006a2sy5tpccefa","tag_id":"ckluievqh000da2sydm246kqt","_id":"ckluievql000ja2sy3vv2ee5n"},{"post_id":"ckluievqg000aa2sy4oyke2jp","tag_id":"ckluievqh000da2sydm246kqt","_id":"ckluievqm000na2syhjjfe9se"},{"post_id":"ckluievqi000fa2sybwougxzf","tag_id":"ckluievqn000ta2sy9lu7fhei","_id":"ckluievqo000za2sybjqqcg2j"},{"post_id":"ckluikvh50000gdsyffmh5g07","tag_id":"ckluilwz7000bgdsyc5xx50b9","_id":"ckluilwz9000dgdsy73l06lw8"},{"post_id":"ckluikvh50000gdsyffmh5g07","tag_id":"ckluilwz9000cgdsy0grx25pi","_id":"ckluilwz9000egdsy1z6g1vqj"},{"post_id":"ckluievqi000fa2sybwougxzf","tag_id":"ckluilwz9000cgdsy0grx25pi","_id":"ckluim1m1000fgdsy6fktg3ka"}],"Tag":[{"name":"v8","_id":"ckluievqe0008a2syhhvngc0y"},{"name":"vue","_id":"ckluievqh000da2sydm246kqt"},{"name":"promise","_id":"ckluievql000ma2syb0li3boe"},{"name":"es6","_id":"ckluievqm000qa2sygdqncv1p"},{"name":"router","_id":"ckluievqn000ta2sy9lu7fhei"},{"name":"vuex","_id":"ckluikvhe0002gdsy59zr3mvd"},{"name":"Vuex","_id":"ckluilwz7000bgdsyc5xx50b9"},{"name":"Vue","_id":"ckluilwz9000cgdsy0grx25pi"}]}}